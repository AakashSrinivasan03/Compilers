//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	public Vector<Fn> fn_list=new Vector();
	Fn current_fn=new Fn();
	Statement current_statement=new Statement();
  int is_jmp_label=0;
  String jmp_label="";
  String curr_reg="";
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      Fn tmp_fn=new Fn();
      current_fn=tmp_fn;
      current_fn.max_no_args=Integer.valueOf(n.f8.f0.tokenImage);
if(Integer.valueOf(n.f2.f0.tokenImage)>4)
        current_fn.excess_args=Integer.valueOf(n.f2.f0.tokenImage)-4;
      fn_list.add(tmp_fn);
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      
      n.f8.accept(this, argu);
      //tmp_fn.code+=" MAIN [ "+n.f2.f0.tokenImage+" ] [ "+n.f5.f0.tokenImage+"] [ "+n.f8.f0.tokenImage+" ]";
      n.f9.accept(this, argu);
      tmp_fn.code+=".text \n .globl "+" main \n"+"main:\n ";
      int a=Integer.valueOf(n.f5.f0.tokenImage)*4;
      if(current_fn.max_no_args>4)
      {
        a=a+4*(current_fn.max_no_args-4);
      }
      tmp_fn.code+=" move $fp,$sp \n subu $sp,$sp,4 \n sw $ra ,0($sp) \n subu $sp, $sp, "+Integer.toString(a)+" \n";
      n.f10.accept(this, null);
      n.f11.accept(this, argu);
      current_fn.code+=" lw $ra, -4($fp) \n "+" addu $sp,$sp ,"+Integer.toString(a+4)+"\n j $ra \n";
      //tmp_fn.code+=" END ";
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      for(int i=0;i<fn_list.size();i++)
      {
        System.out.println(fn_list.get(i).code);
      }
      System.out.println(".text\n .globl _halloc\n_halloc:\nli $v0, 9\nsyscall\n j $ra\n.text\n.globl _print\n_print:\nli $v0, 1\nsyscall\n la $a0, newl\nli $v0, 4\nsyscall\n j $ra\n\n.data\n.align   0\nnewl:    .asciiz \"\n\"   \n .data\n.align   0 \nstr_er:  .asciiz \" ERROR: abnormal termination\n\"");
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      for(int i=0;i<n.f0.size();i++) 
      {
       //stmt_counter++; 
       //pc_label=1;
        is_jmp_label=1;
        jmp_label="";
        current_statement=new Statement();
        //current_statement.stmt_code+=
      n.f0.elementAt(i).accept(this, argu);
      is_jmp_label=0;
      //pc_label=0;
        
     
      }
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      Fn tmp_fn=new Fn();
      current_fn=tmp_fn;
      current_fn.max_no_args=Integer.valueOf(n.f8.f0.tokenImage);
      if(Integer.valueOf(n.f2.f0.tokenImage)>4)
        current_fn.excess_args=Integer.valueOf(n.f2.f0.tokenImage)-4;
      fn_list.add(tmp_fn);
      String s1=n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      int a=Integer.valueOf(n.f5.f0.tokenImage)*4+22*4;
      if(current_fn.max_no_args>4)
      {
        a=a+4*(current_fn.max_no_args-4);
      }
      tmp_fn.code+=".text \n .globl "+s1+" \n "+s1+":\n";
      tmp_fn.code+=" sw $fp,-8($sp) \n move $fp,$sp  \n sw $ra ,-4($sp) \n subu $sp,$sp,8 \nsubu $sp, $sp, "+Integer.toString(a)+" \n";
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      tmp_fn.code+="lw $ra, -4($fp)\n"+"lw $fp, -8($fp)\n"+"addu $sp, $sp,"+Integer.toString(a+8)+" \n"+"j $ra \n";
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      is_jmp_label=0;
      //current_statement=new Statement();
      current_statement.stmt_code+=jmp_label+" ";

      jmp_label="";
      n.f0.accept(this, argu);
      current_fn.code+=current_statement.stmt_code;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      current_statement.stmt_code+=" nop \n";
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      //current_statement.stmt_code+=" error \n";
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s1=n.f1.accept(this, argu).toString();
      n.f2.accept(this, argu);
      current_statement.stmt_code+=" beqz "+" "+s1+" "+n.f2.f0.tokenImage+" \n ";
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      current_statement.stmt_code+=" b "+" "+n.f1.f0.tokenImage+" \n ";
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s1=n.f1.accept(this, argu).toString();
      n.f2.accept(this, argu);
      String s2=n.f3.accept(this, argu).toString();
      current_statement.stmt_code+="sw "+s2+","+n.f2.f0.tokenImage+"("+s1+")\n";
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s1=n.f1.accept(this, argu).toString();
      String s2=n.f2.accept(this, argu).toString();
      n.f3.accept(this, argu);
      current_statement.stmt_code+=" lw "+s1+","+n.f3.f0.tokenImage+"("+s2+")\n";
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s1=n.f1.accept(this, argu).toString();
      curr_reg=s1;
      Expression tmp_exp=new Expression();
      
      n.f2.accept(this, (A)tmp_exp);
      curr_reg="";
      //current_statement.
      if(tmp_exp.is_simple_exp==1)
      { if(tmp_exp.is_val==1)
         {current_statement.stmt_code+="li "+s1+","+tmp_exp.code+"\n";}

         else if(tmp_exp.is_reg==1)
         {current_statement.stmt_code+="move "+s1+" "+tmp_exp.code+"\n";}
       else if(tmp_exp.is_addr==1)
         {current_statement.stmt_code+="la "+s1+","+tmp_exp.code+"\n";}
      // current_statement.stmt_code+="yyy";
      }
      else
      {  current_statement.stmt_code+=tmp_exp.code;

      }

      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Expression tmp_exp=new Expression();
      n.f1.accept(this, (A)tmp_exp);
      current_statement.stmt_code+=" move $v0 $a0 \n";
      if(tmp_exp.is_reg==1)
        current_statement.stmt_code+=" move $a0 "+tmp_exp.code+" \n jal _print \n";
      else if(tmp_exp.is_val==1)
        current_statement.stmt_code+=" li $a0,"+tmp_exp.code+" \n jal _print \n";
      else if(tmp_exp.is_addr==1)
        current_statement.stmt_code+=" la $a0,"+tmp_exp.code+" \n jal _print \n";
	current_statement.stmt_code+=" move $a0 $v0 \n";	
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s1=n.f1.accept(this, argu).toString();
      String s2=n.f2.accept(this, argu).toString();
      if(Integer.valueOf(s2)>=current_fn.excess_args)
      current_statement.stmt_code+=" lw "+s1+","+Integer.toString(Integer.valueOf(s2)*4)+"($sp)\n";
      else
        current_statement.stmt_code+=" lw "+s1+","+Integer.toString(Integer.valueOf(s2)*4)+"($fp)\n";
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s2=n.f1.accept(this, argu).toString();
      String s1=n.f2.accept(this, argu).toString();
      if(Integer.valueOf(s2)>=current_fn.excess_args)
      current_statement.stmt_code+=" sw "+s1+","+Integer.toString(Integer.valueOf(s2)*4)+"($sp)\n";
     else
        current_statement.stmt_code+=" sw "+s1+","+Integer.toString(Integer.valueOf(s2)*4)+"($fp)\n";

      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String s1=n.f2.accept(this, argu).toString();
      current_statement.stmt_code+=" sw "+s1+","+Integer.toString((Integer.valueOf(n.f1.f0.tokenImage)-1)*4)+"($sp"+")\n";
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Expression tmp_exp=new Expression();
      n.f1.accept(this, (A)tmp_exp);
      current_statement.stmt_code+=" jalr "+tmp_exp.code+" \n";
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Expression tmp_exp=new Expression();
      n.f1.accept(this, (A)tmp_exp);
	((Expression)argu).precode+=" move $v1 $a0\n";
      if(tmp_exp.is_reg==1)
      {((Expression)argu).precode+=" move $a0 "+tmp_exp.code+"\n"+"jal _halloc \n";

      }
      else if(tmp_exp.is_val==1)
      {
        ((Expression)argu).precode+=" li $a0, "+tmp_exp.code+"\n"+"jal _halloc \n";
      }
      //((Expression)argu).code+=" v0 ";
	((Expression)argu).precode+=" move $a0 $v1\n";
       ((Expression)argu).code+=((Expression)argu).precode;
       ((Expression)argu).code+=" move "+curr_reg+" "+" $v0\n";



      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String s1=n.f0.accept(this, argu).toString();
      String s2=n.f1.accept(this, argu).toString();
      Expression tmp_exp=new Expression();
      n.f2.accept(this, (A)tmp_exp);
      if(s1.equals(" LE "))
      { ((Expression)argu).code+=" sle "+curr_reg+", "+s2+","+tmp_exp.code +"\n";

      }
      if(s1.equals(" NE "))
      { ((Expression)argu).code+=" sne "+curr_reg+", "+s2+","+tmp_exp.code +"\n";

      }
      if(s1.equals(" PLUS "))
      { ((Expression)argu).code+=" addu "+curr_reg+", "+s2+","+tmp_exp.code +"\n";

      }
      if(s1.equals(" MINUS "))
      { ((Expression)argu).code+=" subu "+curr_reg+", "+s2+","+tmp_exp.code +"\n";

      }
      if(s1.equals(" TIMES "))
      { ((Expression)argu).code+=" mul "+curr_reg+", "+s2+","+tmp_exp.code +"\n";

      }
if(s1.equals(" DIV "))
      { ((Expression)argu).code+=" div "+curr_reg+", "+s2+","+tmp_exp.code +"\n";

      }
 //////////////////////////////division???????????????????????/
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      int which=n.f0.which;
      if(which==0)
      return(R)" LE ";
  if(which==1)
      return(R)" NE ";
  if(which==2)
      return(R)" PLUS ";
  if(which==3)
      return(R)" MINUS ";
  if(which==4)
      return(R)" TIMES ";
  if(which==5)
      return(R)" DIV ";
      return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return (R)n.f1.f0.tokenImage;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      ((Expression)argu).is_simple_exp=1;
      String s1=n.f0.accept(this, argu).toString();
      ((Expression)argu).code+=s1+" ";
      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      int which=n.f0.which;
       if(argu!=null)
      { ((Expression)argu).is_reg=1;


      }
      if(which==0)
      return(R)" $a0 ";
  if(which==1)
      return(R)" $a1 ";
  if(which==2)
      return(R)" $a2 ";
  if(which==3)
      return(R)" $a3 ";
  if(which==4)
      return(R)" $t0 ";
  if(which==5)
      return(R)" $t1 ";
  if(which==6)
      return(R)" $t2 ";
  if(which==7)
      return(R)" $t3 ";
  if(which==8)
      return(R)" $t4 ";
  if(which==9)
      return(R)" $t5 ";
  if(which==10)
      return(R)" $t6 ";
  if(which==11)
      return(R)" $t7 ";
  
  if(which==12)
      return(R)" $s0 ";
  if(which==13)
      return(R)" $s1 ";
  if(which==14)
      return(R)" $s2 ";
  if(which==15)
      return(R)" $s3 ";
  if(which==16)
      return(R)" $s4 ";
  if(which==17)
      return(R)" $s5 ";
  if(which==18)
      return(R)" $s6 ";
  if(which==19)
      return(R)" $s7 ";
  if(which==20)
      return(R)" $t8 ";
  if(which==21)
      return(R)" $t9 ";
  if(which==22)
      return(R)" $v0 ";
  if(which==23)
      return(R)" $v1 ";
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
       if(argu!=null)
      { ((Expression)argu).is_val=1;

      }
      n.f0.accept(this, argu);
      return (R)n.f0.tokenImage;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      if(is_jmp_label==1)
        jmp_label=n.f0.tokenImage+" : ";
       if(argu!=null)
      { ((Expression)argu).is_addr=1;

      }
      n.f0.accept(this, argu);
      return (R)n.f0.tokenImage;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}

class Temp_1
{ public String reg="";
  public String temp_name="";
  public int reg_num=-1;
  public int location_stk;
  public int start;
  public int end=-1;
  public int spill_temp=0;
  public int is_temp_under_4=0;
  public int is_temp_arg_spl=0;

}
 class Expression
{
  public String reg="";
  public int reg_num;
  public String code="";
  public String precode="";
  public int is_addr=0;
  public int is_val=0;
  public int is_reg=0;
  public int is_simple_exp=0;


} 
class Statement
{//public Set<Temp_1> temp_set=new Set();
 
  public String target_label=null;
  public int is_uncond_jump=0;
  public Vector<Statement> succ=new Vector();
  public int line_number;
  public String stmt_code="";

}

 class Fn
{ public String fn_name="";
  public String no_args;
  public int max_no_args=0;
  public String max_alloc="0";
  public String code="";
  public int spilt=0;
  public Vector<Temp_1> temp_vars=new Vector();
  public Vector<Temp_1> temp_vars_reg_alloc=new Vector();
  public Vector<Statement> fn_statements=new Vector();
  public int no_spilled_vars=0;
  public int excess_args=0;
}
