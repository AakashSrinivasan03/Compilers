//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
  public static Vector<Symboltable> s=new Vector();  
   public static Vector<Classtype> class_var=new Vector();
   int class_vardec=0;
   int method_vardec=0;
   int formal_vardec=0;
   int arg_name=0; 
   int current_class_index=-1;
   String argu_name=null;
   int inside_method=0;
   int function_call=0;
   int class_arg_idx=0;
   int method_arg_idx=0;
   public static int count=0;
void check_overloading()
  {      
    for(int i=0;i<class_var.size();i++)
      {  
        for(int k=0;k<class_var.get(i).methods.size();k++)
        {  Classtype parent=class_var.get(i).parent;
        while(parent!=null)
        {       
            for(int l=0;l<parent.methods.size();l++)
            { if(parent.methods.get(l).name==class_var.get(i).methods.get(k).name && parent.methods.get(l).arg_type.size()==class_var.get(i).methods.get(k).arg_type.size() )
                { int flag=1; 
                  for(int j=0;j<parent.methods.get(l).arg_type.size();j++)
                     {  if(parent.methods.get(l).arg_type.get(j).tname!=null && class_var.get(i).methods.get(k).arg_type.get(j).tname!=null)
                          {  if(class_var.get(i).methods.get(k).arg_type.get(j).tname!=parent.methods.get(l).arg_type.get(j).tname)
                                {flag=0;System.out.println("Type error");System.exit(0);}

                          }
                          else if(parent.methods.get(l).arg_type.get(j).ctype!=null && class_var.get(i).methods.get(k).arg_type.get(j).ctype!=null)
                          {  if(class_var.get(i).methods.get(k).arg_type.get(j).ctype.name!=parent.methods.get(l).arg_type.get(j).ctype.name)
                                {flag=0;System.out.println("Type error");System.exit(0);}

                          }
                          else
                            {flag=0;System.out.println("Type error");System.exit(0);}


                     }
                     if(flag==1)
                      { 
                        if(parent.methods.get(l).ret_type.tname!=null && class_var.get(i).methods.get(k).ret_type.tname!=null)
                        { if(parent.methods.get(l).ret_type.tname!=class_var.get(i).methods.get(k).ret_type.tname)
                         {System.out.println("Type error");System.exit(0);}
                        }
                        else if(parent.methods.get(l).ret_type.ctype!=null && class_var.get(i).methods.get(k).ret_type.ctype!=null)
                        { 
                            
                          if(!match(parent.methods.get(l).ret_type.ctype.name,class_var.get(i).methods.get(k).ret_type.ctype.name))
                        {System.out.println("Type error");System.exit(0);}
                            
                          }
                        else
                        {System.out.println("Type error");System.exit(0);}
                        }
                      
                         
                        




                }
                else if(parent.methods.get(l).name==class_var.get(i).methods.get(k).name && parent.methods.get(l).arg_type.size()!=class_var.get(i).methods.get(k).arg_type.size())
                    {System.out.println("Type error");System.exit(0);}
              
            }
              parent=parent.parent;

          
        }

      }



      }







  }
   boolean match(String s1,String s2)
  {  
    if(s2=="int"||s2=="boolean"||s2=="int[]"||s2==null)
     return false;
    if(s1=="int"||s1=="boolean"||s1=="int[]"||s1==null)
     return false;
   Classtype v1=class_var.get(class_var_search(s1));
     Classtype v2=class_var.get(class_var_search(s2));
     while(v2!=null)
     { if(v2.name==v1.name)
        {return true;}
       v2=v2.parent; 

     }
    
     return false;

  }

   public int class_var_search(String s)
   { for(int i=0;i<class_var.size();i++)
      {if(class_var.get(i).name==s)

         return i; 

      }
      return -1;


   }
   public int class_var_mtd_search(Classtype c,String s)
     {  for(int i=0;i<c.methods.size();i++)
          if(c.methods.get(i).name==s)
             return i;
        return -1;


     }
   public int search_within_method_dec(String s1)
   { if(s.size()==0 &&count==2)
      {System.out.println("Type error");System.exit(0);}  
     for(int i=0;i<s.get(0).list.size();i++)
        { if(s.get(0).list.get(i).id_name==s1)
           return i;}
           return -1; 



   }  
   public String search_within_class_dec(String s1)
   {  Classtype parent=class_var.get(current_class_index);
       while(parent!=null)
         { for(int i=0;i<parent.fieldname.size();i++)
             if(parent.fieldname.get(i)==s1)
                {  if(parent.fieldtypes.get(i).ctype==null)
                       return parent.fieldtypes.get(i).tname;
                    else 
                        return parent.fieldtypes.get(i).ctype.name;   


                }
                parent=parent.parent;



         }
          return null;


   }





   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      count=count+1;
       
        if(count==3)
         { check_overloading();
         System.out.println("Program type checked successfully");System.exit(0);}
       


      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
       
      //Symboltable temp=new Symboltable();
      //s.add(temp);
      /*Classtype temp_Classtype=new Classtype();
      class_var.add(temp_Classtype);
      temp_Classtype.name=n.f1.f0.tokenImage;////create mtd for Classtype
      Minfo temp_Minfo=new Minfo();
      temp_Minfo.name=n.f6.tokenImage;
      temp_Minfo.ret_type=new Type_1();
      temp_Minfo.ret_type.tname=n.f5.tokenImage;
      temp_Minfo.arg_name.add(n.f11.f0.tokenImage);
      temp_Minfo.arg_type.add(new Type_1("String",null));
      temp_Classtype.methods.add(temp_Minfo);
      Type_1 var_tmp=temp_Classtype.search_classtype_fields("a");
      if(var_tmp==null)
         System.out.println("aaa");
       System.out.println(class_var.get(0).methods.get(0).name);
       Minfo tmpp=class_var.get(0).search_methods("main".toString());
       if(tmpp!=null)
       System.out.println(tmpp.arg_type.get(0).tname);
       s.add(temp);
    
      System.out.println("woooo");*/
      if(count==0)
      {n.f0.accept(this, argu);
     // System.out.println(argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
    }

    if(count==1)
      {n.f0.accept(this, argu);
      //System.out.println(argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      //System.out.println("woooo");
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
    }
    if(count==2)
      {n.f0.accept(this, argu);
      //System.out.println(argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      //System.out.println("woooo");
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      inside_method=1;
      n.f14.accept(this, argu);
      inside_method=0;
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
    }



    return _ret;


   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {

      if(count==0)
     { //System.out.println("++++++++++++++++++++++++++++++++");
       R _ret=null;
        
      Classtype temp_Classtype=new Classtype();
      class_var.add(temp_Classtype);
      temp_Classtype.name=n.f1.f0.tokenImage;
            

      n.f0.accept(this,argu);
      n.f1.accept(this,argu);
      n.f2.accept(this,argu);
      
      class_vardec=1;
      n.f3.accept(this,argu);
      class_vardec=0;
     
      n.f4.accept(this,argu);
      n.f5.accept(this,argu);
      return _ret;
    }
      if(count==1)
     { //System.out.println("++++++++++++++++++++++++++++++++");
       R _ret=null;
       
        current_class_index=class_var_search(n.f1.f0.tokenImage);
        if(current_class_index==-1)
          {System.out.println("Symbol not found");System.exit(0);}
      //s.add(temp);
     
                 //////////////////////////////////////////////////////////////////////////
      /////temp_Classtype.name=n.f1.f0.tokenImage;////create mtd for Classtype
       // System.out.println(n.f3.nodes.elementAt(0).f0.tokenImage);

        
      /*Minfo temp_Minfo=new Minfo();
      temp_Minfo.name=n.f6.tokenImage;
      temp_Minfo.ret_type=new Type_1();
      temp_Minfo.ret_type.tname=n.f5.tokenImage;
      temp_Minfo.arg_name.add(n.f11.f0.tokenImage);
      temp_Minfo.arg_type.add(new Type_1("String",null));
      temp_Classtype.methods.add(temp_Minfo);
      Type_1 var_tmp=temp_Classtype.search_classtype_fields("a");*/

      n.f0.accept(this,argu);
      n.f1.accept(this,argu);
      n.f2.accept(this,argu);
      //System.out.println("woooo");
      class_vardec=1;
      n.f3.accept(this,argu);
      class_vardec=0;
     // System.out.println(s.get(1).list.size());
      //System.out.println(n.f3.present());
      n.f4.accept(this,argu);
      n.f5.accept(this,argu);
      return _ret;
    }


     if(count==2)
     { //System.out.println("++++++++++++++++++++++++++++++++");
       R _ret=null;
        //Symboltable temp=new Symboltable();
        //s.add(temp);
        //System.out.println("woooo");
        current_class_index=class_var_search(n.f1.f0.tokenImage);
        if(current_class_index==-1)
          {System.out.println("Symbol not found");System.exit(0);}
      //s.add(temp);
     
                 //////////////////////////////////////////////////////////////////////////
      /////temp_Classtype.name=n.f1.f0.tokenImage;////create mtd for Classtype
       // System.out.println(n.f3.nodes.elementAt(0).f0.tokenImage);

        
 

      n.f0.accept(this,argu);
      n.f1.accept(this,argu);
      n.f2.accept(this,argu);
      //System.out.println("woooo");
      class_vardec=1;
      n.f3.accept(this,argu);
      class_vardec=0;
     // System.out.println(s.get(1).list.size());
      //System.out.println(n.f3.present());
      n.f4.accept(this,argu);
      n.f5.accept(this,argu);
      return _ret;
    }

     



    R _ret=null;
    return _ret;


   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
     /* R _ret=null;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;*/

       if(count==0)
     { //System.out.println("++++++++++++++++++++++++++++++++");
       R _ret=null;
        //Symboltable temp=new Symboltable();
        //s.add(temp);
        //System.out.println("woooo");
      //s.add(temp);
      Classtype temp_Classtype=new Classtype();
      class_var.add(temp_Classtype);
      temp_Classtype.name=n.f1.f0.tokenImage;
                 //////////////////////////////////////////////////////////////////////////
      /////temp_Classtype.name=n.f1.f0.tokenImage;////create mtd for Classtype
       // System.out.println(n.f3.nodes.elementAt(0).f0.tokenImage);

        
      /*Minfo temp_Minfo=new Minfo();
      temp_Minfo.name=n.f6.tokenImage;
      temp_Minfo.ret_type=new Type_1();
      temp_Minfo.ret_type.tname=n.f5.tokenImage;
      temp_Minfo.arg_name.add(n.f11.f0.tokenImage);
      temp_Minfo.arg_type.add(new Type_1("String",null));
      temp_Classtype.methods.add(temp_Minfo);
      Type_1 var_tmp=temp_Classtype.search_classtype_fields("a");*/

      n.f0.accept(this,argu);
      n.f1.accept(this,argu);
      n.f2.accept(this,argu);
      n.f3.accept(this,argu);
      n.f4.accept(this,argu);
      //System.out.println("woooo");
      class_vardec=1;
      n.f5.accept(this,argu);
      class_vardec=0;
     // System.out.println(s.get(1).list.size());
      //System.out.println(n.f3.present());
      n.f6.accept(this,argu);
      n.f7.accept(this,argu);
      return _ret;
    }
     
    ////if(count==1)


     if(count==1)
     { //System.out.println("++++++++++++++++++++++++++++++++");
       R _ret=null;
        //Symboltable temp=new Symboltable();
        //s.add(temp);
        //System.out.println("woooo");
        current_class_index=class_var_search(n.f1.f0.tokenImage);
        if(current_class_index==-1)
          {System.out.println("Symbol not found");System.exit(0);}
        int parent_class_index = class_var_search(n.f3.f0.tokenImage);
           if(parent_class_index==-1)
          {System.out.println("Symbol not found");System.exit(0);}
        class_var.get(current_class_index).parent=class_var.get(parent_class_index);
      //s.add(temp);
     
                 //////////////////////////////////////////////////////////////////////////
      /////temp_Classtype.name=n.f1.f0.tokenImage;////create mtd for Classtype
       // System.out.println(n.f3.nodes.elementAt(0).f0.tokenImage);

        
      /*Minfo temp_Minfo=new Minfo();
      temp_Minfo.name=n.f6.tokenImage;
      temp_Minfo.ret_type=new Type_1();
      temp_Minfo.ret_type.tname=n.f5.tokenImage;
      temp_Minfo.arg_name.add(n.f11.f0.tokenImage);
      temp_Minfo.arg_type.add(new Type_1("String",null));
      temp_Classtype.methods.add(temp_Minfo);
      Type_1 var_tmp=temp_Classtype.search_classtype_fields("a");*/

      n.f0.accept(this,argu);
      n.f1.accept(this,argu);
      n.f2.accept(this,argu);
      n.f3.accept(this,argu);
      n.f4.accept(this,argu);
      //System.out.println("woooo");
      class_vardec=1;
      n.f5.accept(this,argu);
      class_vardec=0;
     // System.out.println(s.get(1).list.size());
      //System.out.println(n.f3.present());
      n.f6.accept(this,argu);
      n.f7.accept(this,argu);
      return _ret;
    }

     if(count==2)
     { //System.out.println("++++++++++++++++++++++++++++++++");
       R _ret=null;
        //Symboltable temp=new Symboltable();
        //s.add(temp);
        //System.out.println("woooo");
        current_class_index=class_var_search(n.f1.f0.tokenImage);
        if(current_class_index==-1)
          {System.out.println("Symbol not found");System.exit(0);}
        int parent_class_index = class_var_search(n.f3.f0.tokenImage);
           if(parent_class_index==-1)
          {System.out.println("Symbol not found");System.exit(0);}
        //class_var.get(current_class_index).parent=class_var.get(parent_class_index);
      //s.add(temp);
     
                 //////////////////////////////////////////////////////////////////////////
      /////temp_Classtype.name=n.f1.f0.tokenImage;////create mtd for Classtype
       // System.out.println(n.f3.nodes.elementAt(0).f0.tokenImage);

        
      /*Minfo temp_Minfo=new Minfo();
      temp_Minfo.name=n.f6.tokenImage;
      temp_Minfo.ret_type=new Type_1();
      temp_Minfo.ret_type.tname=n.f5.tokenImage;
      temp_Minfo.arg_name.add(n.f11.f0.tokenImage);
      temp_Minfo.arg_type.add(new Type_1("String",null));
      temp_Classtype.methods.add(temp_Minfo);
      Type_1 var_tmp=temp_Classtype.search_classtype_fields("a");*/

      n.f0.accept(this,argu);
      n.f1.accept(this,argu);
      n.f2.accept(this,argu);
      n.f3.accept(this,argu);
      n.f4.accept(this,argu);
      //System.out.println("woooo");
      class_vardec=1;
      n.f5.accept(this,argu);
      class_vardec=0;
     // System.out.println(s.get(1).list.size());
      //System.out.println(n.f3.present());
      n.f6.accept(this,argu);
      n.f7.accept(this,argu);
      return _ret;
    }





    R _ret=null;
    return _ret;




   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
    R _ret=null;
      if(count==0)
      {String s1=n.f0.accept(this,argu).toString();
      if(s1=="int" || s1=="boolean" || s1=="String" || s1=="int[]")////////////////////////////////look at space
     { Symbol temp=new Symbol();
      temp.id_name=n.f1.f0.tokenImage;
      temp.id_type=new Type_1(s1,null);
      // System.out.println(s1);
      if(class_vardec==1)
      {//s.get(s.size()-1).add_elem(temp);
        class_var.get(class_var.size()-1).fieldname.add(n.f1.f0.tokenImage);
         Type_1 tmpp=new Type_1(s1,null);
        class_var.get(class_var.size()-1).fieldtypes.add(tmpp);
      //System.out.println("llll");
      }
      

     



     }
         //////////////////Aggregation types to be done!!!
      n.f1.accept(this,argu);
      n.f2.accept(this,argu);
      return _ret;
     }

     if(count==1)
      {   
         String s1=n.f0.accept(this,argu).toString();

      if(s1!="int" && s1!="boolean" && s1!="String" && s1!="int[]")////////////////////////////////look at space
     { 
      //Symbol temp=new Symbol();
      //temp.id_name=n.f1.f0.tokenImage;
       int idx=class_var_search(s1);
          

      //temp.id_type=class_var.get(idx);
       //System.out.println(s1);
      if(class_vardec==1)
      {//s.get(s.size()-1).add_elem(temp);
           if(idx==-1)
          {System.out.println("Symbol not found");System.exit(0);}

        class_var.get(current_class_index).fieldname.add(n.f1.f0.tokenImage);
         Type_1 tmpp=new Type_1(null,class_var.get(idx));
        class_var.get(current_class_index).fieldtypes.add(tmpp);
      //System.out.println("llll");
      }
      

     



     }
         //////////////////Aggregation types to be done!!!
      n.f1.accept(this,argu);
      n.f2.accept(this,argu);
      return _ret;


       







      }

      if(count==2)
      { 
        if(method_vardec==0)  
         {n.f0.accept(this,argu);
      
         //////////////////Aggregation types to be done!!!
      n.f1.accept(this,argu);
      n.f2.accept(this,argu);
      return _ret;

      }
       ///////////////////////method variables declaration

        String s1=n.f0.accept(this,argu).toString();
      if(s1!="int" && s1!="boolean" && s1!="String" && s1!="int[]")////////////////////////////////look at space
     { 
      //Symbol temp=new Symbol();
      //temp.id_name=n.f1.f0.tokenImage;
       int idx=class_var_search(s1);
         if(idx==-1)
          {System.out.println("Symbol not found");System.exit(0);}
        Symbol temp=new Symbol();
      temp.id_name=n.f1.f0.tokenImage;
      temp.id_type=new Type_1(null,class_var.get(idx));////////////
       //System.out.println(s1);
      if(method_vardec==1)
      {//s.get(s.size()-1).add_elem(temp);
        s.get(s.size()-1).list.add(temp);
         //Type_1 tmpp=new Type_1(s1,null);
        //class_var.get(class_var.size()-1).fieldtypes.add(tmpp);
      //System.out.println("llll");
      }

      //temp.id_type=class_var.get(idx);
       //System.out.println(s1);
      
      

     



     }
     if(s1=="int" || s1=="boolean" || s1=="String" || s1=="int[]")////////////////////////////////look at space
     { Symbol temp=new Symbol();
      temp.id_name=n.f1.f0.tokenImage;
      temp.id_type=new Type_1(s1,null);
       //System.out.println(s1);
      if(method_vardec==1)
      {//s.get(s.size()-1).add_elem(temp);
        s.get(s.size()-1).list.add(temp);
         //Type_1 tmpp=new Type_1(s1,null);
        //class_var.get(class_var.size()-1).fieldtypes.add(tmpp);
      //System.out.println("llll");
      }
      

     



     }


         //////////////////Aggregation types to be done!!!
      n.f1.accept(this,argu);
      n.f2.accept(this,argu);
      return _ret;


       







      }



   return _ret;



   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
     //Symboltable temp_Symboltable=new Symboltable();
     //s.add(temp_Symboltable);
      if(count==0)
     {Minfo temp_Minfo=new Minfo();
     Type_1 tmp_Type1=null;
      n.f0.accept(this,argu);
      String type_ret=n.f1.accept(this,argu).toString();
      //ystem.out.println("type_ret");System.out.println(type_ret);
      if(type_ret=="int" || type_ret=="boolean" || type_ret=="String" || type_ret=="int[]") //Only creating if it is not aggregate
      {  tmp_Type1=new Type_1(type_ret,null);
        // System.out.println("type_ret");System.out.println(type_ret);

      }
      temp_Minfo.equate(n.f2.f0.tokenImage,tmp_Type1,null,null);
      n.f2.accept(this,argu);
      n.f3.accept(this,argu);
      n.f4.accept(this,(A)temp_Minfo);
      class_var.get(class_var.size()-1).methods.add(temp_Minfo);
      n.f5.accept(this,argu);
      
      n.f6.accept(this,argu);
      method_vardec=1;
      n.f7.accept(this,argu);
      method_vardec=0;
      n.f8.accept(this,argu);
      n.f9.accept(this,argu);
      n.f10.accept(this,argu);
      n.f11.accept(this,argu);
      n.f12.accept(this,argu);
    }

     if(count==1)
     {//Minfo temp_Minfo=new Minfo();
     //Type_1 tmp_Type1=null;
      n.f0.accept(this,argu);
      String type_ret=n.f1.accept(this,argu).toString();
      //ystem.out.println("type_ret");System.out.println(type_ret);
       
      if(type_ret!="int" && type_ret!="boolean" && type_ret!="String" && type_ret!="int[]") //Only creating if it is not aggregate
      {  //tmp_Type1=new Type_1(type_ret,null);
          int idx=class_var_mtd_search (class_var.get(current_class_index),n.f2.f0.tokenImage);//////////////////////////////////////////////////
            if(idx==-1)
          {System.out.println("Symbol not found");System.exit(0);}
          int idx1=class_var_search(type_ret);
           if(idx1==-1)
          {System.out.println("Symbol not found");System.exit(0);}
          class_var.get(current_class_index).methods.get(idx).ret_type=new Type_1(null,class_var.get(idx1));
        // System.out.println("type_ret");System.out.println(type_ret);

      
      //temp_Minfo.equate(n.f2.f0.tokenImage,tmp_Type1,null,null);
      Minfo temp_Minfo=class_var.get(current_class_index).methods.get(idx);
      n.f2.accept(this,argu);
      n.f3.accept(this,argu);
      n.f4.accept(this,(A)temp_Minfo);
      //class_var.get(class_var.size()-1).methods.add(temp_Minfo);
      n.f5.accept(this,argu);
      
      n.f6.accept(this,argu);
      method_vardec=1;
      n.f7.accept(this,argu);
      method_vardec=0;
      n.f8.accept(this,argu);
      n.f9.accept(this,argu);
      n.f10.accept(this,argu);
      n.f11.accept(this,argu);
      n.f12.accept(this,argu);
    }


     else
     {   // Minfo temp_Minfo=new Minfo();
        int idx=class_var_mtd_search (class_var.get(current_class_index),n.f2.f0.tokenImage);
         if(idx==-1)
          {System.out.println("Symbol not found");System.exit(0);}

       Minfo temp_Minfo=class_var.get(current_class_index).methods.get(idx);
      n.f2.accept(this,argu);
      n.f3.accept(this,argu);
      n.f4.accept(this,(A)temp_Minfo);  /////////////huge changing here!!!!!
      class_var.get(class_var.size()-1).methods.add(temp_Minfo);
      n.f5.accept(this,argu);
      
      n.f6.accept(this,argu);
      method_vardec=1;
      n.f7.accept(this,argu);
      method_vardec=0;
      n.f8.accept(this,argu);
      n.f9.accept(this,argu);
      n.f10.accept(this,argu);
      n.f11.accept(this,argu);
      n.f12.accept(this,argu);




     }













    }

/**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */




    if(count==2)
     {//Minfo temp_Minfo=new Minfo();
     //Type_1 tmp_Type1=null;
        
        Symboltable temp_Symboltable=new Symboltable();
     s.add(temp_Symboltable);
      n.f0.accept(this,argu);
      //String type_ret=n.f1.accept(this,argu).toString();
      //ystem.out.println("type_ret");System.out.println(type_ret);
       n.f1.accept(this,argu);
      


     
       // Minfo temp_Minfo=new Minfo();
        int idx=class_var_mtd_search (class_var.get(current_class_index),n.f2.f0.tokenImage);
        if(idx==-1)
          {System.out.println("Symbol not found");System.exit(0);}

       Minfo temp_Minfo=class_var.get(current_class_index).methods.get(idx);
      n.f2.accept(this,argu);
      n.f3.accept(this,argu);
      n.f4.accept(this,(A)temp_Minfo);
      //class_var.get(class_var.size()-1).methods.add(temp_Minfo);
      n.f5.accept(this,argu);
      
      n.f6.accept(this,argu);
      method_vardec=1;
      n.f7.accept(this,argu);
      method_vardec=0;
      inside_method=1;
      n.f8.accept(this,(A)temp_Minfo);
      n.f9.accept(this,argu);
       
      String s4=n.f10.accept(this,(A)temp_Minfo).toString();
      //System.out.println(s4);
      //System.out.println(temp_Minfo.ret_type.tname); 
      inside_method=0;
      n.f11.accept(this,argu);
      n.f12.accept(this,argu);
      if(temp_Minfo.ret_type.ctype==null  )
        { if(temp_Minfo.ret_type.tname!=s4)
          {System.out.println("Type error");System.exit(0);}}
       
       else if(!match(temp_Minfo.ret_type.ctype.name,s4))
         {System.out.println("Type error");System.exit(0);}
        
       



      s.remove(s.size()-1); ///////////////////////////////////remove comment

     




     








    }





      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      //System.out.println(((Minfo)argu).name);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      argu_name=n.f1.f0.tokenImage;
      n.f0.accept(this, argu);
      argu_name=null;
      arg_name=1;
      
      n.f1.accept(this, argu);
      
      arg_name=0;
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
       R _ret=null;
       String s1;
       if(count==0)
      {s1=n.f0.accept(this,argu).toString();
       if(argu==null)       ////////////Means not method parameter!!///////////////////Also stored in reverse???
      {
      return (R)s1;
      }
      else
        {Minfo temp_Minfo=((Minfo)argu);
           if(s1=="int"||s1=="boolean"||s1=="int[]")
           temp_Minfo.arg_type.add(new Type_1(s1,null));
           else
            temp_Minfo.arg_type.add(new Type_1(null,null));

         
        }    ///////////////for methods alone,create oredring!!!
      }


       if(count==1)
      {s1=n.f0.accept(this,argu).toString();
         // System.out.println("uuuuuu");
       if(argu==null)       ////////////Means not method parameter!!///////////////////Also stored in reverse???

      { //System.out.println("uuuuuu");
      return (R)s1;
      }
      else
        {Minfo temp_Minfo=((Minfo)argu);
           if(s1!="int"&&s1!="boolean"&&s1!="int[]")
            {int idx=class_var_search(s1); 
               if(idx==-1)
          {System.out.println("Symbol not found");System.exit(0);}
              //int idx1=class_var_mtd_search(class_var(current_class_index),s1)
           //temp_Minfo.arg_type.add(new Type_1(s1,null));
              int ii=0;
              for(ii=0;ii<temp_Minfo.arg_name.size();ii++)
                 if(temp_Minfo.arg_name.get(ii)==argu_name)
                    break;
              if(ii==temp_Minfo.arg_name.size())
                {System.out.println("Symbol not found");System.exit(0);}  
               //System.out.println(argu_name);   
               temp_Minfo.arg_type.get(ii).ctype=class_var.get(idx);




           }

         
        }    ///////////////for methods alone,create oredring!!!
      }
       if (count==2)
        {    return (R)n.f0.accept(this,argu);                                                  ///////////////highest level change!!!!
          //return (R)n.f0.accept(this,argu).toString();

        }




        return null;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      
      n.f0.accept(this,argu);
      n.f1.accept(this,argu);
      n.f2.accept(this,argu);
      return (R)"int[]";
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this,argu);
      return (R)n.f0.tokenImage;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this,argu);
      return (R)n.f0.tokenImage;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      if(count==2)
      {String s1=n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String s2=n.f2.accept(this, argu).toString();
      if(s2=="int"||s2=="boolean"||s2=="int[]")
      {if(s1!=s2)
        {System.out.println("Type error");System.exit(0);}
      }
      else if(!match(s1,s2))
         {System.out.println("Type error");System.exit(0);}
      n.f3.accept(this, argu);}
      else
      {n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      n.f3.accept(this, argu);}


      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */          ////////////////checkout for size of array!!!!
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      if(count==2)
      {String s1=n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String s2=n.f2.accept(this, argu).toString();
       if(s2!="int")
        {System.out.println("Type error");System.exit(0);}
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String s3=n.f5.accept(this, argu).toString();
        if(s1=="int[]")
           s1="int";
       if(s1!=s3)
        {System.out.println("Type error");System.exit(0);}
      n.f6.accept(this, argu);
      }
      else
      {n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
       
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      n.f6.accept(this, argu);
      }



      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      if(count!=2)
      {n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      }
       else
      {n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String s=n.f2.accept(this, argu).toString();
       if(s!="boolean")
         {System.out.println("Type error");System.exit(0);}
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      }


      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      if(count!=2)
      {n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      }
      else
      {
        n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String s1=n.f2.accept(this, argu).toString();
      if(s1!="boolean")
         {System.out.println("Type error");System.exit(0);}
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);



      }

      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      if(count!=2)
      {n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
    }
     else
     { n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String s=n.f2.accept(this, argu).toString();
       if(s!="boolean")
         {System.out.println("Type error");System.exit(0);}
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);


     }

      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      if(count!=2)
      {n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      }
      else
      {n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String s=n.f2.accept(this, argu).toString();
       if(s!="int") ///////////////////////////////////////////////////////////////s!="boolean" && 
         {System.out.println("Type error");System.exit(0);}
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      }


      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      if(count==2)
      {String s=n.f0.accept(this, argu).toString();return(R) s;}
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      if(count!=2) 
      {n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
    }
     else
     { String s1=n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String s2=n.f2.accept(this, argu).toString();
       if(s1!="boolean"||s2!="boolean")
        {System.out.println("Type error");System.exit(0);}
        return (R)"boolean";

     }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      //R _ret=null;
      //n.f0.accept(this, argu);
      //n.f1.accept(this, argu);
      //n.f2.accept(this, argu);
      //return _ret;
     R _ret=null;
      if(count!=2) 
      {n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
    }
     else
     { String s1=n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String s2=n.f2.accept(this, argu).toString();
       if(s1!="boolean"||s2!="boolean")
        {System.out.println("Type error");System.exit(0);}
        return (R)"boolean";

     }

      return _ret;

   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {

    R _ret=null;
      if(count!=2) 
      {n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
    }
     else
     { String s1=n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String s2=n.f2.accept(this, argu).toString();
       if(s1!="int"||s2!="int")
        {System.out.println("Type error");System.exit(0);}
        return (R)"boolean";

     }

      return _ret;
     
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      if(count!=2) 
      {n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
    }
     else
     { String s1=n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String s2=n.f2.accept(this, argu).toString();
       if(s1!=s2)
        {System.out.println("Type error");System.exit(0);}
        return (R)"boolean";

     }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
       R _ret=null;
      if(count!=2) 
      {n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
    }
     else
     { String s1=n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String s2=n.f2.accept(this, argu).toString();
       if(s1!="int"||s2!="int")
        {System.out.println("Type error");System.exit(0);}
        return (R)"int";

     }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      if(count!=2) 
      {n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
    }
     else
     { String s1=n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String s2=n.f2.accept(this, argu).toString();
       if(s1!="int"||s2!="int")
        {System.out.println("Type error");System.exit(0);}
        return (R)"int";

     }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
       R _ret=null;
      if(count!=2) 
      {n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
    }
     else
     { String s1=n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String s2=n.f2.accept(this, argu).toString();
       if(s1!="int"||s2!="int")
        {System.out.println("Type error");System.exit(0);}
        return (R)"int";

     }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      if(count!=2) 
      {n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
    }
     else
     { String s1=n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String s2=n.f2.accept(this, argu).toString();
       if(s1!="int"||s2!="int")
        {System.out.println("Type error");System.exit(0);}
        return (R)"int";

     }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      if(count!=2)
      {n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      }
      else
      {
        String s1= n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String s2=n.f2.accept(this, argu).toString();
       if(s1!="int[]"||s2!="int") ////////////////////////////////check......
       {System.out.println("Type error");System.exit(0);}
      n.f3.accept(this, argu);
      return (R)"int";

      }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      if(count!=2) 
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      }
       else
       {  String s=n.f0.accept(this, argu).toString();
          if(s!="int[]")
          {System.out.println("Type error");System.exit(0);}
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
       return (R)"int";


       }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {  ///////////////////check for matching!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      R _ret=null;                          //////exprn list to be seen!!!
      if(count!=2)
      {n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      }
      else
      {  
        String s1=n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
        function_call=1; 
        String s2=n.f2.accept(this, argu).toString();
        function_call=0;
        int idx=class_var_search(s1);
        if(idx==-1)
          {System.out.println("Symbol not found");System.exit(0);}
        ///////////////////////////////////////////
        Classtype parent=class_var.get(idx);
         int idx1=-1;
         int idxx=idx;
        // System.out.println("hhhh");
         while(parent!=null)
          {    idxx=class_var_search(parent.name);

             if(idxx==-1)
          {System.out.println("Symbol not found");System.exit(0);}
            idx1=class_var_mtd_search(parent,s2);
               if(idx1!=-1)
               {    n.f3.accept(this, argu);
                class_arg_idx=idxx;
         method_arg_idx=idx1;
      n.f4.accept(this, argu);
      if(parent.methods.get(idx1).arg_type.size()!=parent.methods.get(idx1).list_counter)
             {System.out.println("Type error");System.exit(0);}
             parent.methods.get(idx1).list_counter=0;
      n.f5.accept(this, argu);  


        if(class_var.get(idxx).methods.get(idx1).ret_type.ctype==null)
        return (R)class_var.get(idxx).methods.get(idx1).ret_type.tname;
        else return(R)(class_var.get(idxx).methods.get(idx1).ret_type.ctype.name);


                //break;
               }
               parent=parent.parent;
              // System.out.println("aa");
                  
          }
        //int idx1=class_var_mtd_search(class_var.get(idx),s2);
        if(idx1==-1)
          {System.out.println("Symbol not found");System.exit(0);}
      
      
        

      }

      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null; 
      if(count!=2)
      { n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      }
      else{
        //list_counter=1;
      Minfo m1=class_var.get(class_arg_idx).methods.get(method_arg_idx);
      m1.max_counter=m1.arg_type.size();
      //System.out.println(m1.max_counter);
      if(m1.max_counter==0 )
        {System.out.println("Type error");System.exit(0);}
      String s1=n.f0.accept(this, argu).toString();
       if(s1=="int"||s1=="boolean"||s1=="int[]")
         { 
           if(s1!=m1.arg_type.get(m1.list_counter).tname)
             { System.out.println("Type error");System.exit(0);}

         }
          else
          {  
              if(m1.arg_type.get(m1.list_counter).tname!=null)
                 {System.out.println("Type error");System.exit(0);}
           if(!match(m1.arg_type.get(m1.list_counter).ctype.name,s1)) ////////////////////////////////type check/////////////////////////////////
             {System.out.println("Type error");System.exit(0);}

          }
            //System.out.println(list_counter);
          m1.list_counter=m1.list_counter+1;       


      n.f1.accept(this, argu);
       if(m1.max_counter!=m1.list_counter )
        {System.out.println("Type error");System.exit(0);}
        //m1.list_counter=0;////////////////////////////

    }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      if(count!=2)
      {n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      }
       else
       {   Minfo m1=class_var.get(class_arg_idx).methods.get(method_arg_idx);
       //m1.max_counter=m1.arg_type.size();
      //System.out.println(m1.max_counter);
      if(m1.max_counter==m1.list_counter )
        {System.out.println("Type error");System.exit(0);}
          n.f0.accept(this, argu);
      String s1=n.f1.accept(this, argu).toString();
       if(s1=="int"||s1=="boolean"||s1=="int[]")
         { if(s1!=m1.arg_type.get(m1.list_counter).tname)
             {/*System.out.println(list_counter);System.out.println(((Minfo)argu).arg_type.get(list_counter).tname);*/ System.out.println("Type error");System.exit(0);}

         }
          else
          { if(m1.arg_type.get(m1.list_counter).tname!=null)
                 {System.out.println("Type error");System.exit(0);}  
           if(!match(m1.arg_type.get(m1.list_counter).ctype.name,s1)) ////////////////////////////////type check/////////////////////////////////
             {System.out.println("Type error");System.exit(0);}

          }
            //System.out.println(list_counter);
          m1.list_counter=m1.list_counter+1;       


      





       }


      return _ret;    
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      if(count!=2)
      {n.f0.accept(this, argu);}
       else
        {//System.out.println("hellooooooooooooooooo.........");
      String s=n.f0.accept(this, argu).toString();
      return (R)s;}
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      if(count!=2)
      n.f0.accept(this, argu);
      else
        {//System.out.println("hellooooooooooooooooo.........");
n.f0.accept(this, argu);return (R)"int";}
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
     // R _ret=null;
      //n.f0.accept(this, argu);
      //return _ret;
       R _ret=null;
      if(count!=2)
      n.f0.accept(this, argu);
      else
        {n.f0.accept(this, argu);return (R)"boolean";}
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      //R _ret=null;
      //n.f0.accept(this, argu);
      //return _ret;
        R _ret=null;
      if(count!=2)
      n.f0.accept(this, argu);
      else
        {n.f0.accept(this, argu);return (R)"boolean";}
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      if(count!=2 || method_vardec==1)
      {n.f0.accept(this, argu);
      if(argu==null)
      return (R)n.f0.tokenImage;
      if(arg_name==1 && count==0) //////////////////////////////////////////////////////////////////////////
      ((Minfo)argu).arg_name.add(n.f0.tokenImage);
      return (R)n.f0.tokenImage;
      }
      else if(count==2 && inside_method==1 &&function_call==0){  ////////////////////////////////+++++++++++++++++++++++++++check this condtn
         String s1=n.f0.tokenImage;
         //System.out.println(s1);
         int idx1=search_within_method_dec(s1);
         if(idx1!=-1)
          {  if( s.get(0).list.get(idx1).id_type.ctype==null)
             return (R)s.get(0).list.get(idx1).id_type.tname;
              else
               return (R)s.get(0).list.get(idx1).id_type.ctype.name; 

           }
           else if(count==2 )
           {  String s3=search_within_class_dec(s1);

               if(s3!=null)
                return (R)s3;
              for(int i=0;i<((Minfo)argu).arg_name.size();i++)
                if(((Minfo)argu).arg_name.get(i)==s1)
                   { if(((Minfo)argu).arg_type.get(i).ctype==null)
                       return (R)((Minfo)argu).arg_type.get(i).tname;
                       else
                        return (R)((Minfo)argu).arg_type.get(i).ctype.name; 

                   }

               //if(s3==null)
                System.out.println("Symbol not found");System.exit(0);
               
                return null;

           }




      }
         else if(count==2 && inside_method==1 &&function_call==1)
         {  n.f0.accept(this, argu);
      
              return (R)n.f0.tokenImage;



         }
      





      return _ret;

      }
       
      
      //}

   //}

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(count==2)
      return (R)class_var.get(current_class_index).name;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      //System.out.println("pppppppppppppppppppp");
      if(count!=2)
      {n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      }
      else
      {  n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String s1=n.f3.accept(this, argu).toString();
      n.f4.accept(this, argu);
       if(s1!="int")
         {System.out.println("Type error");System.exit(0);}
       //System.out.println("pppppppppppppppppppp");
       return (R)"int[]";


      }
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      if(count!=2)
      {n.f0.accept(this, argu);
        
      n.f1.accept(this, argu);

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      }
      else
      { n.f0.accept(this, argu);
        function_call=1;
      String s1=n.f1.accept(this, argu).toString();
       function_call=0;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
       return (R)s1;


      }
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      if(count!=2)
      {n.f0.accept(this, argu);
      n.f1.accept(this, argu);
       }
      else
      {  n.f0.accept(this, argu);
         String s1=n.f1.accept(this, argu).toString();
         if(s1!="boolean")
          {System.out.println("Type error");System.exit(0);}
         return(R)"boolean";
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      if(count!=2)
      {n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      }
      else
      { n.f0.accept(this, argu);
       String s1=n.f1.accept(this, argu).toString();
      n.f2.accept(this, argu);
        return (R)s1;


      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}

