//
// Generated by JTB 1.3.2
//
//How to deal with dummy statements?
//v0,v1 interchngability???

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
 static Vector<Fn> fns=new Vector();
 Vector<String> label_name=new Vector();
 Vector<Integer> label_location=new Vector();
  static int count=0;
  int stmt_counter=0;
  int fn_idx=0;
  int is_def=0;
  int pc_label=0;
  int jump_label=0;
  int is_exp=0;
  int is_tmp_exp=0;
  int is_call=0;
  int pc_label_new=0;
  String return_stat="";
  Fn current_fn=new Fn();
  String target_label_for_writing="";
  Statement current_statement=new Statement();
  int v0_free=1;
  int v1_free=1;
  int label_search(String s1)
  { //System.out.println(s1+"ooooo");
    for(int i=0;i<label_name.size();i++)
      { if(label_name.get(i).equals(s1))
         {//System.out.println(label_location.get(i));
          return label_location.get(i);}

      }
      return -1;



  }

  String reg_map(int a)
  { if(a<=9)
    return "t"+Integer.toString(a)+" ";
    else if(a<=17)
      return "s"+Integer.toString(a-10)+" ";
    else
      return "a"+Integer.toString(a-18)+" ";




  }
  /*String spill_load_code(Fn f,String s1)
  {
    int idx=f.search_temp_1(s1);
    if(f.temp_vars_reg_alloc.get(idx).spill_)
  }*/
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      if(count==0)
      { stmt_counter=0;

      Fn temp_fn=new Fn();
      current_fn=temp_fn;
      temp_fn.no_args="0";
      //current_fn.fn
      fns.add(temp_fn);
      n.f0.accept(this, argu);
      temp_fn.fn_name=n.f0.tokenImage;

      n.f1.accept(this, (A) temp_fn );
      n.f2.accept(this, argu);
      //System.out.println("PPPPPPP");
      ////current_fn.max_alloc=Integer.valueOf(current_fn.temp_vars.size())+Integer.valueOf(current_fn.no_args)+Integer.valueOf(current_fn.max_call_args);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      /*for(int i=0;i<fns.size();i++)
      { System.out.println("====="+fns.get(i).fn_name);
         fns.get(i).sort_asc();
        for(int j=0;j<fns.get(i).temp_vars.size();j++)
        System.out.println(fns.get(i).temp_vars.get(j).temp_name+Integer.toString(fns.get(i).temp_vars.get(j).start)+Integer.toString(fns.get(i).temp_vars.get(j).end));

      }
      fns.get(1).linearscan();
      System.out.println(fns.get(1).spilt);*/
      

      for(int i=0;i<fns.size();i++)
      { //System.out.println(fns.size());
        //System.out.println("\n "+fns.get(i).fn_name+" \n");
        //fns.get(i).print1();

      }
      //System.out.println("HEYYY");
      for(int i=0;i<temp_fn.fn_statements.size()-1;i++)
      { if(temp_fn.fn_statements.get(i).target_label!=null)
        { 
          if(temp_fn.fn_statements.get(i).is_uncond_jump==0)
        {temp_fn.fn_statements.get(i).succ.add(temp_fn.fn_statements.get(i+1));
          int line_idx=label_search(temp_fn.fn_statements.get(i).target_label);
          //System.out.println(line_idx);
          temp_fn.fn_statements.get(i).succ.add(temp_fn.fn_statements.get(line_idx-1));

        }
        else
        {//temp_fn.fn_statements.get(i).succ.add(temp_fn.fn_statements.get(i+1));
          int line_idx=label_search(temp_fn.fn_statements.get(i).target_label);
          temp_fn.fn_statements.get(i).succ.add(temp_fn.fn_statements.get(line_idx-1));
          //System.out.println("##########++++++++");

        }
      }
        else
        { //System.out.println("YYYYYYYNNNNNNNNNNN");
          temp_fn.fn_statements.get(i).succ.add(temp_fn.fn_statements.get(i+1));
        }
      }

      for(int i=0;i<temp_fn.fn_statements.size();i++)
      {
        for(int j=0;j<temp_fn.fn_statements.get(i).succ.size();j++)
        { //System.out.println(Integer.toString(temp_fn.fn_statements.get(i).line_number)+"-->"+Integer.toString(temp_fn.fn_statements.get(i).succ.get(j).line_number));

        }
      }
      for(int i=0;i<fns.size();i++)
      { fns.get(i).cfg();
       // System.out.println(temp_fn.)

      }


for(int i=0;i<fns.size();i++)
      { //System.out.println("=====<><><><><><>"+fns.get(i).fn_name);
         fns.get(i).sort_asc();
        //for(int j=0;j<fns.get(i).temp_vars_reg_alloc.size();j++)
        //System.out.println(fns.get(i).temp_vars_reg_alloc.get(j).temp_name+Integer.toString(fns.get(i).temp_vars_reg_alloc.get(j).start)+"-- TO ----"+Integer.toString(fns.get(i).temp_vars_reg_alloc.get(j).end));

      }

      count+=1;

      return _ret;
    }
if(count==1)
      { stmt_counter=0;

      
      
      n.f0.accept(this, argu);
      
      Fn temp_fn=fns.get(fn_idx);
      current_fn=temp_fn;
      temp_fn.code+=" MAIN ["+current_fn.no_args+"]["+current_fn.max_alloc+"]["+current_fn.max_call_args+"] ";

      n.f1.accept(this, (A) temp_fn );
      n.f2.accept(this, argu);
      temp_fn.code+=" END ";
      if(temp_fn.spilt==1)
      temp_fn.code+="//SPILLED";
    else
      temp_fn.code+="//NOTSPILLED";
     return_stat="";
     temp_fn.print1();
      //System.out.println(current_fn.code);
      ////current_fn.max_alloc=Integer.valueOf(current_fn.temp_vars.size())+Integer.valueOf(current_fn.no_args)+Integer.valueOf(current_fn.max_call_args);
      fn_idx++;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
     /* for(int i=0;i<fns.size();i++)
      { System.out.println("====="+fns.get(i).fn_name);
         fns.get(i).sort_asc();
        for(int j=0;j<fns.get(i).temp_vars.size();j++)
        System.out.println(fns.get(i).temp_vars.get(j).temp_name+Integer.toString(fns.get(i).temp_vars.get(j).start)+Integer.toString(fns.get(i).temp_vars.get(j).end));

      }*/
      //System.out.println("#########::::::::::::");
      for(int i=0;i<fns.size();i++)
      { System.out.println(fns.get(i).code);

      }
      
      //System.out.println(Integer.valueOf(parts[1]));
      //System.out.println("TEMP0".compareTo("TEMP"+Integer.toString(1) ));
      




      return _ret;
    }



    return _ret;

   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      if(count==0)
     {  for(int i=0;i<n.f0.size();i++) 
      {
       stmt_counter++; 
       pc_label=1;
      n.f0.elementAt(i).accept(this, argu);
      pc_label=0;
        
     
      }
    }

    else if(count==1)
     {  for(int i=0;i<n.f0.size();i++) 
      {current_statement=current_fn.fn_statements.get(stmt_counter);
          target_label_for_writing="";
       stmt_counter++; 
       pc_label=1;
       pc_label_new=1;
      n.f0.elementAt(i).accept(this, argu);
      //current_statement.stmt_code+=" "+target_label_for_writing+" ";
      current_fn.code+=current_statement.stmt_code;
      //current_fn.code+=return_stat;
      //return_stat="";
      pc_label=0;
      pc_label_new=0;
        
     
      }
    }

      //n.f0.accept(this,argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      if(count==0)
      {
      stmt_counter=0;
      Fn temp_fn=new Fn();
      current_fn=temp_fn;
      fns.add(temp_fn);
      n.f0.accept(this, argu);
      temp_fn.fn_name=n.f0.f0.tokenImage;
      int x_fn_args=0;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      temp_fn.no_args=n.f2.f0.tokenImage.toString();
      n.f3.accept(this, argu);
      
      n.f4.accept(this, (A)temp_fn );
      for(int i=0;i<temp_fn.fn_statements.size()-1;i++)
      { if(temp_fn.fn_statements.get(i).target_label!=null)
        { 
          if(temp_fn.fn_statements.get(i).is_uncond_jump==0)
        {temp_fn.fn_statements.get(i).succ.add(temp_fn.fn_statements.get(i+1));
          int line_idx=label_search(temp_fn.fn_statements.get(i).target_label);
          //System.out.println(line_idx);
          temp_fn.fn_statements.get(i).succ.add(temp_fn.fn_statements.get(line_idx-1));

        }
        else
        {//temp_fn.fn_statements.get(i).succ.add(temp_fn.fn_statements.get(i+1));
          int line_idx=label_search(temp_fn.fn_statements.get(i).target_label);
          temp_fn.fn_statements.get(i).succ.add(temp_fn.fn_statements.get(line_idx-1));
         // System.out.println("##########++++++++");

        }
      }
        else
        {
          temp_fn.fn_statements.get(i).succ.add(temp_fn.fn_statements.get(i+1));
        }
      }


      //for(int i=0;i<temp_fn.fn_statements.size();i++)
      //{
        //for(int j=0;j<temp_fn.fn_statements.get(i).succ.size();j++)
        //{ System.out.println(Integer.toString(temp_fn.fn_statements.get(i).line_number)+"-->"+Integer.toString(temp_fn.fn_statements.get(i).succ.get(j).line_number));

        //}
      //}
      //System.out.println(label_location);

    }


    else if(count==1)
    {

      stmt_counter=0;
      Fn temp_fn=fns.get(fn_idx);
      current_fn=temp_fn;
      fn_idx++;
      current_fn.code+=n.f0.f0.tokenImage+" [ "+current_fn.no_args+"]["+current_fn.max_alloc+"]["+current_fn.max_call_args+"] ";
      //fns.add(temp_fn);
      n.f0.accept(this, argu);
      //temp_fn.fn_name=n.f0.f0.tokenImage;
      //int x_fn_args=0;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      //temp_fn.no_args=n.f2.f0.tokenImage.toString();
      n.f3.accept(this, argu);
      
      n.f4.accept(this, (A)temp_fn );
      current_fn.code+=return_stat;
      return_stat="";
      if(current_fn.spilt==1)
      current_fn.code+="//SPILLED";
    else
      current_fn.code+="//NOTSPILLED";

      


     
     // System.out.println(label_location);


    }







      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;

      //stmt_counter++;
      pc_label=0;
      pc_label_new=0;
      current_statement.stmt_code+=" "+target_label_for_writing+" ";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      if(count==0)
      {Statement tmp=new Statement();
      tmp.line_number=stmt_counter;
      current_fn.fn_statements.add(tmp);
      n.f0.accept(this, argu);
     }
     else if(count==1)
     {
      n.f0.accept(this, argu);
      current_statement.stmt_code+=" NOOP ";
     }
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      if(count==0)
      {Statement tmp=new Statement();
      tmp.line_number=stmt_counter;
      current_fn.fn_statements.add(tmp);
      n.f0.accept(this, argu);
     }
     else if(count==1)
     {n.f0.accept(this, argu);
      current_statement.stmt_code+=" ERROR ";

     }
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      if(count==0)
      {Statement tmp=new Statement();
      tmp.line_number=stmt_counter;
      current_fn.fn_statements.add(tmp);
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      jump_label=1;
      n.f2.accept(this, argu);
      jump_label=0;
     }
     else if(count==1)
     {
      n.f0.accept(this, argu);
      String s2=n.f1.accept(this, argu).toString();
      jump_label=1;
      n.f2.accept(this, argu);
      jump_label=0;
      int idx1=current_fn.search_temp_1(s2);
      if(current_fn.temp_vars_reg_alloc.get(idx1).spill_temp==0)
      current_statement.stmt_code+=" "+n.f0.tokenImage+" "+reg_map(current_fn.temp_vars_reg_alloc.get(idx1).reg_num)+" "+n.f2.f0.tokenImage+" ";
      else
      { int stk_pos=current_fn.temp_vars_reg_alloc.get(idx1).location_stk;
        int is_arg=current_fn.temp_vars_reg_alloc.get(idx1).is_temp_arg_spl;
        //if(is_arg==1||Integer.valueOf(current_fn.no_args)<=4)
        //{
          current_statement.stmt_code+=" "+" ALOAD "+" v0 SPILLEDARG "+Integer.valueOf(stk_pos);
          current_statement.stmt_code+=" "+n.f0.tokenImage+" v0 "+n.f2.f0.tokenImage+" ";


        //}
        /*else
        {
          current_statement.stmt_code+=" "+" ALOAD "+" v0 SPILLEDARG "+Integer.valueOf(stk_pos+Integer.valueOf(current_fn.no_args)-4);
          current_statement.stmt_code+=" "+n.f0.tokenImage+" v0 "+n.f2.f0.tokenImage+" ";


        }*/



      }

     }
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      if(count==0)
      {Statement tmp=new Statement();
      tmp.line_number=stmt_counter;
      tmp.is_uncond_jump=1;
      current_fn.fn_statements.add(tmp);
      n.f0.accept(this, argu);
      jump_label=1;
      //System.out.println("########HHHHHHHHHHHH");
      n.f1.accept(this, argu);
      jump_label=0;
      }
      else if(count==1)
      { 
        //Statement tmp=new Statement();
      //tmp.line_number=stmt_counter;
      //tmp.is_uncond_jump=1;
      //current_fn.fn_statements.add(tmp);
      n.f0.accept(this, argu);

      jump_label=1;
      //System.out.println("########HHHHHHHHHHHH");
      n.f1.accept(this, argu);
      current_statement.stmt_code+=" JUMP "+n.f1.f0.tokenImage;
      jump_label=0;


      }
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      if(count==0)
      {Statement tmp=new Statement();
      tmp.line_number=stmt_counter;
      current_fn.fn_statements.add(tmp);
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      }
      else if(count==1)
       {

        n.f0.accept(this, argu);
      String s1=n.f1.accept(this, argu).toString();
      n.f2.accept(this, argu);
      String s2=n.f3.accept(this, argu).toString();
      int idx1=current_fn.search_temp_1(s1);
      int idx2=current_fn.search_temp_1(s2);
      if(current_fn.temp_vars_reg_alloc.get(idx1).spill_temp==0&&current_fn.temp_vars_reg_alloc.get(idx2).spill_temp==0)
        current_statement.stmt_code+=" "+n.f0.tokenImage+" "+reg_map(current_fn.temp_vars_reg_alloc.get(idx1).reg_num)+" "+n.f2.f0.tokenImage+" "+reg_map(current_fn.temp_vars_reg_alloc.get(idx2).reg_num);

      else if(current_fn.temp_vars_reg_alloc.get(idx1).spill_temp==1&&current_fn.temp_vars_reg_alloc.get(idx2).spill_temp==0)
      { int stk_pos=current_fn.temp_vars_reg_alloc.get(idx1).location_stk;
        int is_arg=current_fn.temp_vars_reg_alloc.get(idx1).is_temp_arg_spl;
        //if(is_arg==1||Integer.valueOf(current_fn.no_args)<=4)
        //{
          current_statement.stmt_code+=" "+" ALOAD "+" v0 SPILLEDARG "+Integer.toString(stk_pos);
          current_statement.stmt_code+=" "+n.f0.tokenImage+" v0 "+n.f2.f0.tokenImage+" "+reg_map(current_fn.temp_vars_reg_alloc.get(idx2).reg_num)+" ";


        //}
        /*else
        {
          current_statement.stmt_code+=" "+" ALOAD "+" v0 SPILLEDARG "+Integer.toString(stk_pos+Integer.valueOf(current_fn.no_args)-4);
          current_statement.stmt_code+=" "+n.f0.tokenImage+" v0 "+n.f2.f0.tokenImage+" "+reg_map(current_fn.temp_vars_reg_alloc.get(idx2).reg_num)+" ";


        }*/



      }
      else if(current_fn.temp_vars_reg_alloc.get(idx1).spill_temp==0&&current_fn.temp_vars_reg_alloc.get(idx2).spill_temp==1)
      { int stk_pos=current_fn.temp_vars_reg_alloc.get(idx2).location_stk;
        int is_arg=current_fn.temp_vars_reg_alloc.get(idx2).is_temp_arg_spl;
        if(true)
        {current_statement.stmt_code+=" "+" ALOAD "+" v0 SPILLEDARG "+Integer.toString(stk_pos);
          current_statement.stmt_code+=" "+n.f0.tokenImage+" "+reg_map(current_fn.temp_vars_reg_alloc.get(idx1).reg_num)+" "+n.f2.f0.tokenImage+" "+"v0"+" ";


        }
        else
        {
          current_statement.stmt_code+=" "+" ALOAD "+" v0 SPILLEDARG "+Integer.toString(stk_pos+Integer.valueOf(current_fn.no_args)-4);
          current_statement.stmt_code+=" "+n.f0.tokenImage+" "+reg_map(current_fn.temp_vars_reg_alloc.get(idx1).reg_num)+" "+n.f2.f0.tokenImage+" "+"v0"+" ";


        }



      }
      else
      {

        int stk_pos_1=current_fn.temp_vars_reg_alloc.get(idx1).location_stk;
        int is_arg_1=current_fn.temp_vars_reg_alloc.get(idx1).is_temp_arg_spl;



        int stk_pos_2=current_fn.temp_vars_reg_alloc.get(idx2).location_stk;
        int is_arg_2=current_fn.temp_vars_reg_alloc.get(idx2).is_temp_arg_spl;
        if(true)
        {current_statement.stmt_code+=" "+" ALOAD "+" v0 SPILLEDARG "+Integer.toString(stk_pos_1);
         
        }
        else
        {
          current_statement.stmt_code+=" "+" ALOAD "+" v0 SPILLEDARG "+Integer.toString(stk_pos_1+Integer.valueOf(current_fn.no_args)-4);
         }
         if(true)
        {current_statement.stmt_code+=" "+" ALOAD "+" v1 SPILLEDARG "+Integer.toString(stk_pos_2);
         
        }
        else
        {
          current_statement.stmt_code+=" "+" ALOAD "+" v1 SPILLEDARG "+Integer.toString(stk_pos_2+Integer.valueOf(current_fn.no_args)-4);
         }
         current_statement.stmt_code+=" "+n.f0.tokenImage+" v0 "+n.f2.f0.tokenImage+" v1 ";


      }


       } 
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      if(count==0)
     { Statement tmp=new Statement();
      tmp.line_number=stmt_counter;
      current_fn.fn_statements.add(tmp);
      n.f0.accept(this, argu);
      is_def=1;
      n.f1.accept(this, argu);
      is_def=0;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
    }
    else if(count==1)
    {
       
      
      n.f0.accept(this, argu);
      is_def=1;
      String s1=n.f1.accept(this, argu).toString();
      is_def=0;
      String s2=n.f2.accept(this, argu).toString();
      n.f3.accept(this, argu);
      int idx1=current_fn.search_temp_1(s1);
      int idx2=current_fn.search_temp_1(s2);
      if(current_fn.temp_vars_reg_alloc.get(idx1).spill_temp==0&&current_fn.temp_vars_reg_alloc.get(idx2).spill_temp==0)
        {current_statement.stmt_code+=" "+n.f0.tokenImage+" "+reg_map(current_fn.temp_vars_reg_alloc.get(idx1).reg_num)+" "+" "+reg_map(current_fn.temp_vars_reg_alloc.get(idx2).reg_num)+" "+n.f3.f0.tokenImage+" ";

         }
      else if(current_fn.temp_vars_reg_alloc.get(idx1).spill_temp==1&&current_fn.temp_vars_reg_alloc.get(idx2).spill_temp==0)
      { int stk_pos=current_fn.temp_vars_reg_alloc.get(idx1).location_stk;
        int is_arg=current_fn.temp_vars_reg_alloc.get(idx1).is_temp_arg_spl;
        if(true)
        {current_statement.stmt_code+=" "+" ALOAD "+" v0 SPILLEDARG "+Integer.toString(stk_pos);
          current_statement.stmt_code+=" "+n.f0.tokenImage+" t0 "+" "+reg_map(current_fn.temp_vars_reg_alloc.get(idx2).reg_num)+" "+n.f3.f0.tokenImage+" ";
          current_statement.stmt_code+=" ASTORE SPILLEDARG "+Integer.valueOf(stk_pos)+" v0 ";


        }
        else
        {
          current_statement.stmt_code+=" "+" ALOAD "+" v0 SPILLEDARG "+Integer.toString(stk_pos+Integer.valueOf(current_fn.no_args)-4);
          current_statement.stmt_code+=" "+n.f0.tokenImage+" v0 "+" "+reg_map(current_fn.temp_vars_reg_alloc.get(idx2).reg_num)+" "+n.f3.f0.tokenImage+" ";
          current_statement.stmt_code+=" ASTORE SPILLEDARG "+Integer.valueOf(stk_pos+Integer.valueOf(current_fn.no_args)-4)+" v0 ";

        }



      }
      else if(current_fn.temp_vars_reg_alloc.get(idx1).spill_temp==0&&current_fn.temp_vars_reg_alloc.get(idx2).spill_temp==1)
      { int stk_pos=current_fn.temp_vars_reg_alloc.get(idx2).location_stk;
        int is_arg=current_fn.temp_vars_reg_alloc.get(idx2).is_temp_arg_spl;
        if(true)
        {current_statement.stmt_code+=" "+" ALOAD "+" v0 SPILLEDARG "+Integer.toString(stk_pos);
          current_statement.stmt_code+=" "+n.f0.tokenImage+" "+reg_map(current_fn.temp_vars_reg_alloc.get(idx1).reg_num)+" "+" "+" v0 "+n.f2.f0.tokenImage+" ";


        }
        else
        {
          current_statement.stmt_code+=" "+" ALOAD "+" v0 SPILLEDARG "+Integer.toString(stk_pos+Integer.valueOf(current_fn.no_args)-4);
         current_statement.stmt_code+=" "+n.f0.tokenImage+" "+reg_map(current_fn.temp_vars_reg_alloc.get(idx1).reg_num)+" "+" "+" v0 "+n.f2.f0.tokenImage+" ";


        }



      }
      else
      {

        int stk_pos_1=current_fn.temp_vars_reg_alloc.get(idx1).location_stk;
        int is_arg_1=current_fn.temp_vars_reg_alloc.get(idx1).is_temp_arg_spl;



        int stk_pos_2=current_fn.temp_vars_reg_alloc.get(idx2).location_stk;
        int is_arg_2=current_fn.temp_vars_reg_alloc.get(idx2).is_temp_arg_spl;
        if(true)
        {current_statement.stmt_code+=" "+" ALOAD "+" v0 SPILLEDARG "+Integer.toString(stk_pos_1);
         
        }
        else
        {
          current_statement.stmt_code+=" "+" ALOAD "+" v0 SPILLEDARG "+Integer.toString(stk_pos_1+Integer.valueOf(current_fn.no_args)-4);
         }
         if(true)
        {current_statement.stmt_code+=" "+" ALOAD "+" v1 SPILLEDARG "+Integer.toString(stk_pos_2);
         
        }
        else
        {
          current_statement.stmt_code+=" "+" ALOAD "+" v1 SPILLEDARG "+Integer.toString(stk_pos_2+Integer.valueOf(current_fn.no_args)-4);
         }
         current_statement.stmt_code+=" "+n.f0.tokenImage+" v0 "+n.f2.f0.tokenImage+" v1 ";
         if(true)
         current_statement.stmt_code+=" ASTORE SPILLEDARG "+Integer.valueOf(stk_pos_1)+" v0 ";
         else
          {current_statement.stmt_code+=" ASTORE SPILLEDARG "+Integer.valueOf(stk_pos_1+Integer.valueOf(current_fn.no_args)-4)+" v0 ";}

      }



    }

      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      if(count==0)
      {Statement tmp=new Statement();
      tmp.line_number=stmt_counter;
      current_fn.fn_statements.add(tmp);
      
      n.f0.accept(this, argu);
      is_def=1;
      n.f1.accept(this, argu);
      is_def=0;
      //Expression tmp_exp=new Expression();
      n.f2.accept(this, argu);
    }
    else
    { 
       n.f0.accept(this, argu);
      is_def=1;
      String s2=n.f1.accept(this, argu).toString();
      is_def=0;
      Expression tmp_exp=new Expression();
      n.f2.accept(this, (A)tmp_exp);
       if(is_call==0)
      {int idx1=current_fn.search_temp_1(s2);
         if(idx1==-1)
          {return _ret;}
       // System.out.println("++++++++++++++"+s2+current_fn.);
       int stk_pos=current_fn.temp_vars_reg_alloc.get(idx1).location_stk;
        int is_arg=current_fn.temp_vars_reg_alloc.get(idx1).is_temp_arg_spl;
        


      
      if(current_fn.temp_vars_reg_alloc.get(idx1).spill_temp==0)
      { current_statement.stmt_code+=tmp_exp.precode+" MOVE "+reg_map(current_fn.temp_vars_reg_alloc.get(idx1).reg_num)+" "+tmp_exp.code;

      }
      else
      {
        /*if(is_arg==1||Integer.valueOf(current_fn.no_args)<=4)
          current_statement.stmt_code+=tmp_exp.precode+" MOVE "+reg_map(current_fn.temp_vars_reg_alloc.get(idx1).reg_num)+" "+" SPILLEDARG "+Integer.toString(stk_pos);
        else
          current_statement.stmt_code+=tmp_exp.precode+" MOVE "+reg_map(current_fn.temp_vars_reg_alloc.get(idx1).reg_num)+" "+" SPILLEDARG "+Integer.toString(stk_pos+Integer.valueOf(current_fn.no_args)-4); 
         */  

         if(true)
          current_statement.stmt_code+=tmp_exp.precode+" MOVE v0 "+tmp_exp.code +" ASTORE "+" "+" SPILLEDARG "+Integer.toString(stk_pos)+" v0 ";
        else
          current_statement.stmt_code+=tmp_exp.precode+" MOVE v0 " +tmp_exp.code +" ASTORE "+" SPILLEDARG "+Integer.toString(stk_pos+Integer.valueOf(current_fn.no_args)-4)+" "+" v0 ";        

      }



   }
   else
   { is_call=0;
      //System.out.println("YYYYYYYYYYYYYYYY");
      current_statement.stmt_code+=tmp_exp.code+" ";
      int idx1=current_fn.search_temp_1(s2);
       int stk_pos=current_fn.temp_vars_reg_alloc.get(idx1).location_stk;
        int is_arg=current_fn.temp_vars_reg_alloc.get(idx1).is_temp_arg_spl;
      if(current_fn.temp_vars_reg_alloc.get(idx1).spill_temp==0)
      { current_statement.stmt_code+=" MOVE "+reg_map(current_fn.temp_vars_reg_alloc.get(idx1).reg_num)+" v0 ";
        // System.out.println("YYYYYYYYYYYYYYYY"+current_statement.stmt_code);
      }
      else
      {  current_statement.stmt_code+=" ASTORE SPILLEDARG "+ Integer.toString(stk_pos)+" v0 ";
        
        // System.out.println("YYYYYYYYYYYYYYYY");
        /*if(is_arg==1||Integer.valueOf(current_fn.no_args)<=4)
          current_statement.stmt_code+=tmp_exp.precode+" MOVE "+" v1 "+" "+" SPILLEDARG "+Integer.toString(stk_pos);
        else
          current_statement.stmt_code+=tmp_exp.precode+" MOVE "+" v1 "+" "+" SPILLEDARG "+Integer.toString(stk_pos+Integer.valueOf(current_fn.no_args)-4); 
        */          

      }

   }
    
  }


      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      if(count==0)
      {Statement tmp=new Statement();
      tmp.line_number=stmt_counter;
      current_fn.fn_statements.add(tmp);
      n.f0.accept(this, argu);

      n.f1.accept(this, argu);
      }
      else if(count==1)
      {
        n.f0.accept(this, argu);
        Expression tmp_exp=new Expression();
      n.f1.accept(this, (A)tmp_exp);
      current_statement.stmt_code+=tmp_exp.precode+" PRINT "+tmp_exp.code+" ";
      //System.out.println("PRINT++++++"+tmp_exp.code);
      }
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;

      n.f0.accept(this, argu);
      v0_free=1;
      v1_free=1;
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      stmt_counter++;
      Statement tmp=new Statement();
      tmp.line_number=stmt_counter;
      current_fn.fn_statements.add(tmp);
      Expression tmp_exp=new Expression();
      n.f2.accept(this, argu);
      //stmt_counter++;
      n.f3.accept(this, (A)tmp_exp);
      return_stat+=tmp_exp.precode;
      return_stat+=" MOVE v0 "+tmp_exp.code+" END ";
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      if(count==0)
      {n.f0.accept(this, argu);
      //Expression tmp_exp=new Expression();
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      int no_args=Integer.valueOf(current_fn.max_call_args);
      if(n.f3.size()>no_args)
      { current_fn.max_call_args=Integer.toString(n.f3.size());

      }
      n.f4.accept(this, argu);

      }
      else if(count==1)
      {  for(int i=0;i<22;i++)
      { ((Expression)argu).code+=" ASTORE SPILLEDARG "+Integer.toString(Integer.valueOf(current_fn.max_alloc)-23+i)+" "+reg_map(i);

      }
       is_call=1;
        n.f0.accept(this, argu);
      Expression tmp_exp=new Expression();
      n.f1.accept(this, (A)tmp_exp);
      n.f2.accept(this, argu);
      int ii=0;

      
      Vector<String>v_1=new Vector();
      for(int i=0;i<n.f3.size();i++)
      {
      String s1=n.f3.elementAt(i).accept(this, (A)argu).toString();
      v_1.add(s1);
      }

      /*for(int i=0;i<v_1.size();i++)
      { String s1=v_1.get(i);
      int idx=current_fn.search_temp_1(s1);
      if(current_fn.temp_vars_reg_alloc.get(idx).spill_temp==0)
      { v_1.add(s1);  
        if(i>=4)
       ((Expression)argu).code+=" PASSARG "+Integer.toString(i-3)+" "+reg_map(current_fn.temp_vars_reg_alloc.get(idx).reg_num)+" ";
        else
          ((Expression)argu).code+=" MOVE "+" a"+Integer.toString(i)+" "+reg_map(current_fn.temp_vars_reg_alloc.get(idx).reg_num)+" ";

      }
      else
      {  if(Integer.valueOf(current_fn.no_args)>4)
        ((Expression)argu).code+=" ALOAD "+" v0 SPILLEDARG "+Integer.toString(current_fn.temp_vars_reg_alloc.get(idx).location_stk+ Integer.valueOf(current_fn.no_args)-4 );
      else
        ((Expression)argu).code+=" ALOAD "+" v0 SPILLEDARG "+Integer.toString(current_fn.temp_vars_reg_alloc.get(idx).location_stk );
      if(i>=4)
      ((Expression)argu).code+=" PASSARG "+Integer.toString(i-3)+" "+" v0 ";
    else
          ((Expression)argu).code+=" MOVE "+" a"+Integer.toString(i)+" v0 "+" ";
      }

       
      }*/

      for(int i=4;i<v_1.size();i++)
      { String s1=v_1.get(i);
      int idx=current_fn.search_temp_1(s1);
      if(current_fn.temp_vars_reg_alloc.get(idx).spill_temp==0)
      { //v_1.add(s1);  
        if(i>=4)
       {// String s1=reg_map(current_fn.temp_vars_reg_alloc.get(idx).reg_num);

        ((Expression)argu).code+=" ALOAD v0 "+" SPILLEDARG "+Integer.toString(current_fn.temp_vars_reg_alloc.get(idx).reg_num+Integer.valueOf(current_fn.max_alloc)-23)+" ";
        ((Expression)argu).code+=" PASSARG "+Integer.toString(i-3)+" v0 ";
        }
        else
          { ((Expression)argu).code+=" ALOAD v0 "+" SPILLEDARG "+Integer.toString(current_fn.temp_vars_reg_alloc.get(idx).reg_num+60+1)+" ";
            ((Expression)argu).code+=" MOVE "+" a"+Integer.toString(i)+" "+" v0 ";
          }

      }
      else
      {  if(false)
        ((Expression)argu).code+=" ALOAD "+" v0 SPILLEDARG "+Integer.toString(current_fn.temp_vars_reg_alloc.get(idx).location_stk+ Integer.valueOf(current_fn.no_args)-4 );
      else
        ((Expression)argu).code+=" ALOAD "+" v0 SPILLEDARG "+Integer.toString(current_fn.temp_vars_reg_alloc.get(idx).location_stk );
      if(i>=4)
      ((Expression)argu).code+=" PASSARG "+Integer.toString(i-3)+" "+" v0 ";
    else
          ((Expression)argu).code+=" MOVE "+" a"+Integer.toString(i)+" v0 "+" ";
      }

       
      }
      for(int i=0;i<4 && i< v_1.size();i++)
      { String s1=v_1.get(i);
      int idx=current_fn.search_temp_1(s1);
      if(current_fn.temp_vars_reg_alloc.get(idx).spill_temp==0)
      { //v_1.add(s1);  
        if(i>=4)
       {
       ((Expression)argu).code+=" PASSARG "+Integer.toString(i-3)+" "+reg_map(current_fn.temp_vars_reg_alloc.get(idx).reg_num)+" ";
       }
        else
         { ((Expression)argu).code+=" ALOAD v0 "+" SPILLEDARG "+Integer.toString(current_fn.temp_vars_reg_alloc.get(idx).reg_num+Integer.valueOf(current_fn.max_alloc)-23)+" "; 
          ((Expression)argu).code+=" MOVE "+" a"+Integer.toString(i)+" v0 ";
          }

      }
      else
      {  if(false &&current_fn.temp_vars_reg_alloc.get(idx).is_temp_arg_spl==0)
        ((Expression)argu).code+=" ALOAD "+" v0 SPILLEDARG "+Integer.toString(current_fn.temp_vars_reg_alloc.get(idx).location_stk+ Integer.valueOf(current_fn.no_args)-4 );
      else
        ((Expression)argu).code+=" ALOAD "+" v0 SPILLEDARG "+Integer.toString(current_fn.temp_vars_reg_alloc.get(idx).location_stk );
      if(i>=4)
      ((Expression)argu).code+=" PASSARG "+Integer.toString(i-3)+" "+" v0 ";
    else
          ((Expression)argu).code+=" MOVE "+" a"+Integer.toString(i)+" v0 "+" ";
      }

       
      }



      ((Expression)argu).code+=tmp_exp.precode+" CALL "+tmp_exp.code+" ";
         for(int i=0;i<22;i++)
      { ((Expression)argu).code+=" ALOAD "+reg_map(i)+" SPILLEDARG "+Integer.toString(Integer.valueOf(current_fn.max_alloc)-23+i)+" ";

      }

      /*for(int i=0;i<v_1.size();i++)
      {  int idx=search_temp_1(v_1.get(i));
        ((Expression)argu).code+=" ALOAD "+Integer.toString(i)+" "+reg_map(current_fn.temp_vars_reg_alloc.get(idx).reg_num)+" "

      }*/


      n.f4.accept(this, argu);
    }
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      if(count==0)
      {
        n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      }
      else if(count==1)
      {n.f0.accept(this, argu);
      Expression tmp_exp=new Expression();
      n.f1.accept(this, (A)tmp_exp);
      ((Expression)argu).precode+=tmp_exp.precode;
      ((Expression)argu).code+=" HALLOCATE "+tmp_exp.code;
      }

      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      if(count==0)
      {
        n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      }
      else if(count==1)
      {String s2=n.f0.accept(this, argu).toString();
      String s1=n.f1.accept(this, argu).toString();
      Expression tmp_exp=new Expression();
      n.f2.accept(this, (A)tmp_exp);
      ((Expression)argu).precode+=tmp_exp.precode;

      int idx1=current_fn.search_temp_1(s1);
      if(current_fn.temp_vars_reg_alloc.get(idx1).spill_temp==0)
      ((Expression)argu).code+=" "+s2+" "+reg_map(current_fn.temp_vars_reg_alloc.get(idx1).reg_num)+" "+tmp_exp.code+" ";
      else
      { int stk_pos=current_fn.temp_vars_reg_alloc.get(idx1).location_stk;
        int is_arg=current_fn.temp_vars_reg_alloc.get(idx1).is_temp_arg_spl;
        if(true)
        {((Expression)argu).precode+=" "+" ALOAD "+" v1 SPILLEDARG "+Integer.toString(stk_pos);////////be careful with precode and code
          ((Expression)argu).code+=" "+s2+" v1 "+tmp_exp.code+" ";


        }
        else
        {
          ((Expression)argu).precode+=" "+" ALOAD "+" v1 SPILLEDARG "+Integer.toString(stk_pos+Integer.valueOf(current_fn.no_args)-4);
          ((Expression)argu).code+=" "+s2+" v1 "+tmp_exp.code+" ";


        }



      }
      //((Expression)argu).code+=" "+s1+" "+  +tmp_exp.code;
    }
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      if(count==0)
      n.f0.accept(this, argu);
    else if(count==1)
    {
      n.f0.accept(this, argu);
      int which=n.f0.which;
      if(which==0)
      return(R)" LE ";
  if(which==1)
      return(R)" NE ";
  if(which==2)
      return(R)" PLUS ";
  if(which==3)
      return(R)" MINUS ";
  if(which==4)
      return(R)" TIMES ";
  if(which==5)
      return(R)" DIV ";
      //return _ret;
    }

      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      //n.f0.accept(this, argu);
      if(count==0)
      n.f0.accept(this, argu);
      else if(count==1&& argu!=null)
      {
        Expression tmp_exp=new Expression();
        is_exp=1;
        n.f0.accept(this, (A)tmp_exp);
        is_exp=0;
        //System.out.println(argu);
        ((Expression)argu).precode+=tmp_exp.precode;
        ((Expression)argu).code+=tmp_exp.code;
      }
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      is_tmp_exp=1;
      n.f1.accept(this, argu);
      is_tmp_exp=0;
      if(count==0)
     { if(is_def==1)
      { //System.out.println("#########################+==========");
        current_fn.fn_statements.get(stmt_counter-1).def.add("TEMP"+n.f1.f0.tokenImage);
         is_def=0;

      }
      else
      { current_fn.fn_statements.get(stmt_counter-1).use.add("TEMP"+n.f1.f0.tokenImage);

      }
      if(Integer.valueOf(n.f1.f0.tokenImage)>= Integer.valueOf (current_fn.no_args) )
      {String s1="TEMP"+n.f1.f0.tokenImage;
      current_fn.update_liveness(s1,stmt_counter);
      }
    }
    else if(count==1 && argu!=null&&is_exp==1)
    { //is_exp=0;
      
      int idx1=current_fn.search_temp_1("TEMP"+n.f1.f0.tokenImage);
     // System.out.println("###########--------++++++++++++++++"+reg_map(current_fn.temp_vars_reg_alloc.get(idx1).reg_num)+n.f0.tokenImage+n.f1.f0.tokenImage);
      if(current_fn.temp_vars_reg_alloc.get(idx1).spill_temp==0)
      ((Expression)argu).code+=" "+reg_map(current_fn.temp_vars_reg_alloc.get(idx1).reg_num)+" ";
      else
      { int stk_pos=current_fn.temp_vars_reg_alloc.get(idx1).location_stk;
        int is_arg=current_fn.temp_vars_reg_alloc.get(idx1).is_temp_arg_spl;
        if(true)
        { //System.out.println("#####LLLLLLLLLLLLLLLLLLLLLLLLLLLLLL00L");
         // System.out.println(stk_pos);
        ((Expression)argu).precode+=" "+" ALOAD "+" v0 SPILLEDARG "+Integer.toString(stk_pos);////////be careful with precode and code
          ((Expression)argu).code+=" v0 ";


        }
        else
        {  
          ((Expression)argu).precode+=" "+" ALOAD "+" v0 SPILLEDARG "+Integer.toString(stk_pos+Integer.valueOf(current_fn.no_args)-4);
          ((Expression)argu).code+=" v0 ";


        }



      }

    }

      return (R)("TEMP"+n.f1.f0.tokenImage);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      if(count==1 && is_exp==1 &&is_tmp_exp==0)
      {  
        //is_exp=0;
        ((Expression)argu).code+=n.f0.tokenImage;
      }
      return (R)n.f0.tokenImage;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
     if(count==0)
     { n.f0.accept(this, argu);
      if(pc_label==1)
      {label_name.add(n.f0.tokenImage);
      label_location.add(stmt_counter);
      //System.out.println("################++++++++123"+n.f0.tokenImage);
      }
      else if(jump_label==1)
      { jump_label=0;
        current_fn.fn_statements.get(stmt_counter-1).target_label=n.f0.tokenImage;
        //System.out.println("################++++++++124"+n.f0.tokenImage);
        //System.out.println(stmt_counter);


      }
    }
    else if(count==1)
    {  n.f0.accept(this, argu);
      if(pc_label_new==1)
      { pc_label_new=0;
         target_label_for_writing=n.f0.tokenImage;

      }
      if(count==1 && is_exp==1)
      {
        //is_exp=0;
        ((Expression)argu).code+=n.f0.tokenImage;
      }

    }

      return _ret;
   }

}

//0-20 args,21-60 local,60-100->registers
class Temp_1
{ public String reg="";
  public String temp_name="";
  public int reg_num=-1;
  public int location_stk;
  public int start;
  public int end=-1;
  public int spill_temp=0;
  public int is_temp_under_4=0;
  public int is_temp_arg_spl=0;

}
 class Expression
{
  public String reg="";
  public int reg_num;
  public String code="";
  public String precode="";


} 
class Statement
{//public Set<Temp_1> temp_set=new Set();
  public Set def = new LinkedHashSet();
  public Set use = new LinkedHashSet();
  public Set in = new LinkedHashSet();
  public Set out = new LinkedHashSet();
  public String target_label=null;
  public int is_uncond_jump=0;
  public Vector<Statement> succ=new Vector();
  public int line_number;
  public String stmt_code="";

}

 class Fn
{ public String fn_name="";
  public String no_args;
  public String max_call_args="0";
  public String max_alloc="0";
  public String code="";
  public int spilt=0;
  public Vector<Temp_1> temp_vars=new Vector();
  public Vector<Temp_1> temp_vars_reg_alloc=new Vector();
  public Vector<Statement> fn_statements=new Vector();
  public int no_spilled_vars=0;
  public Vector<Integer> used_reg=new Vector();

  public void cfg()
  { int flag=1;
    int counter=0;
     while(flag==1)
     {  flag=0;
      counter++;
      for(int i=0;i<fn_statements.size();i++)
      {  Set in_dash = new LinkedHashSet(fn_statements.get(i).in);
         Set out_dash = new LinkedHashSet(fn_statements.get(i).out);
        //in_dash=fn_statements.get(i).in
        fn_statements.get(i).out = new LinkedHashSet();
        //System.out.println("NNNNNNNNNNNNNNNNN");
        for(int k=0;k<fn_statements.get(i).succ.size();k++)
        {//Set out_dash = new LinkedHashSet();
          //System.out.println("YYYYYYYYYYYYYY");
         fn_statements.get(i).out.addAll(fn_statements.get(i).succ.get(k).in);
        }
         //fn_statements.get(i).out=out_dash;
          Set in_temp = new LinkedHashSet();
         in_temp.addAll(fn_statements.get(i).use);
         Set diff = new LinkedHashSet(fn_statements.get(i).out);
       diff.removeAll(fn_statements.get(i).def);
       in_temp.addAll(diff);
       fn_statements.get(i).in=in_temp;
       if(!in_dash.equals(fn_statements.get(i).in) || !out_dash.equals(fn_statements.get(i).out))
        {flag=1;} 

        

      }



     }
     //System.out.println("##########################################");
     //System.out.println(counter);
     //temp_vars=new Vector();
     for(int i=0;i<fn_statements.size();i++)
     {
      Iterator iter = fn_statements.get(i).in.iterator(); 
      
   // check values
   while (iter.hasNext()){
   //System.out.println("Value: "+iter.next() + " ");  
   String tmp=(String)iter.next();
   //if(tmp.equals("TEMP200"))
   // System.out.println("\n======\n=========\n*******");
    String[] parts = tmp.split("P");
    int idx=Integer.valueOf(parts[1]);
    int no_args_val=Integer.valueOf(no_args);
    if(idx>=no_args_val)
   update_liveness_1(tmp,fn_statements.get(i).line_number,0,-1);
else if(idx<4)
{   if(search_temp_1(tmp)==-1)
  {Temp_1 tmp_1=new Temp_1();
      //System.out.println("#########YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY");
      tmp_1.temp_name=tmp;
      tmp_1.start=0;
      //String[] parts = tmp.split("P");
      tmp_1.reg_num=18+idx;
      tmp_1.is_temp_under_4=1;
      temp_vars_reg_alloc.add(tmp_1);
  }

}

else
{  int stk_pos=idx- 4;
  update_liveness_1(tmp,fn_statements.get(i).line_number,1,stk_pos);

}


   }



     }

     //for(int i=0;temp_vars.size();i++)




     linearscan();







  }









  public void print1()
  { /*for(int i=0;i<fn_statements.size();i++)
    {  System.out.println("USE:");
      System.out.println(fn_statements.get(i).use);
      System.out.println("DEF:");
      System.out.println(fn_statements.get(i).def);
      System.out.println("IN:");
      System.out.println(fn_statements.get(i).in);
      System.out.println("OUT:");
      System.out.println(fn_statements.get(i).out);
      System.out.println("============================");

    }*/


  }




  public int search_temp(String s1)
  { for(int i=0;i<temp_vars.size();i++)
     { if( s1.equals(temp_vars.get(i).temp_name))
      {  //System.out.println("LLLLLLLLLLLLL");
        return i;


      }

     }
     return -1;


  }
  public int search_temp_1(String s1)
  { for(int i=0;i<temp_vars_reg_alloc.size();i++)
     { if( s1.equals(temp_vars_reg_alloc.get(i).temp_name))
      {  //System.out.println("LLLLLLLLLLLLL");
        return i;


      }

     }
     return -1;


  }
  public void update_liveness(String s1,int pos)
  { 
     if(search_temp(s1)==-1)
     { Temp_1 tmp=new Temp_1();
      tmp.temp_name=s1;
      tmp.start=pos;
      temp_vars.add(tmp);




     }
     else
     { int idx=search_temp(s1);
      if(pos>temp_vars.get(idx).end)
      { temp_vars.get(idx).end=pos;

      }




     }





  }
   public void update_liveness_1(String s1,int pos,int flag,int stk_pos)
  { 
     if(search_temp_1(s1)==-1)
     { Temp_1 tmp=new Temp_1();
      tmp.temp_name=s1;
      tmp.start=pos;
      tmp.end=pos;
      if(flag==1)
      { tmp.location_stk=stk_pos;
        tmp.is_temp_arg_spl=1;
        tmp.spill_temp=1;

      }
      temp_vars_reg_alloc.add(tmp);




     }
     else
     { int idx=search_temp_1(s1);
      if(pos>temp_vars_reg_alloc.get(idx).end)
      { temp_vars_reg_alloc.get(idx).end=pos;

      }




     }





  }

public void sort_asc()
{

  for(int i=0;i<temp_vars_reg_alloc.size();i++)
  {
    for(int j=0;j<temp_vars_reg_alloc.size()-i-1;j++)
    { if(temp_vars_reg_alloc.get(j).start>temp_vars_reg_alloc.get(j+1).start)
      { Temp_1 tmp=new Temp_1();
        tmp=temp_vars_reg_alloc.get(j);
        temp_vars_reg_alloc.set(j,temp_vars_reg_alloc.get(j+1));
        temp_vars_reg_alloc.set(j+1,tmp);


      }




    }



  }





}


public void linearscan()
{  //System.out.println("LINEAR SCAN.........");
  //System.out.println(temp_vars_reg_alloc.size());
  Vector<Temp_1> reg_allocated=new Vector();
  int pos_on_stk;
  if(Integer.valueOf(no_args)<=4)
    pos_on_stk=0;
  else
    pos_on_stk=Integer.valueOf(no_args)-4;
  Vector<Integer> free_reg=new Vector();
  for(int i=0;i<18;i++)
    free_reg.add(i);

  for(int i=0;i<temp_vars_reg_alloc.size();i++)
  {  if(temp_vars_reg_alloc.get(i).is_temp_arg_spl!=1 &&temp_vars_reg_alloc.get(i).is_temp_under_4!=1)
     {for(int j=0;j<reg_allocated.size();j++)
     {  
      if(reg_allocated.get(j).end<temp_vars_reg_alloc.get(i).start)
      {   int tmp=reg_allocated.get(j).reg_num;
        reg_allocated.removeElement(reg_allocated.get(j));
        free_reg.add(tmp);
        j--;
      }


     }
     if(temp_vars_reg_alloc.get(i).is_temp_under_4!=1)
     {if(reg_allocated.size()<18)
     {
      Temp_1 tmp=new Temp_1();
      tmp=temp_vars_reg_alloc.get(i);
      tmp.reg_num=free_reg.get(0);
      used_reg.add(tmp.reg_num);
      //System.out.println("PPP");
      free_reg.removeElement(free_reg.get(0));
      reg_allocated.add(tmp);

     }
     else
     {  spilt=1;
      Temp_1 max=new Temp_1();
      max=reg_allocated.get(0);
       for(int j=0;j<reg_allocated.size();j++)
     { if(reg_allocated.get(j).end>=max.end)
      {  max=reg_allocated.get(j);

      }



     }
     int idx=-1;
     //for(int ii=0;ii<reg_allocated.size();ii++)
     // if(reg_allocated.get(ii)==temp_vars.get(i))
     //   break;
     if(max.end>temp_vars_reg_alloc.get(i).end)
     { max.spill_temp=1;
         // System.out.println("RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"+temp_vars_reg_alloc.get(i).temp_name+max.temp_name);
      if(max.is_temp_arg_spl!=1)
      max.location_stk=pos_on_stk++;
      temp_vars_reg_alloc.get(i).reg_num=max.reg_num;
      max.reg_num=-1;
      reg_allocated.removeElement(max);
      reg_allocated.add(temp_vars_reg_alloc.get(i));


     }
     else
     { temp_vars_reg_alloc.get(i).spill_temp=1;
      if(temp_vars_reg_alloc.get(i).is_temp_arg_spl!=1)
      temp_vars_reg_alloc.get(i).location_stk=pos_on_stk++; //anything here??
      //reg_allocated.get(i).reg=max.reg;


     }



     }
    }









  }
}

  //for(int i=)

//System.out.println("==============================");
for(int i=0;i<temp_vars_reg_alloc.size();i++)
{  //System.out.println(temp_vars_reg_alloc.get(i).temp_name+Integer.toString(temp_vars_reg_alloc.get(i).reg_num));
  if(temp_vars_reg_alloc.get(i).spill_temp==1)
    no_spilled_vars++;
  

}
max_alloc=Integer.toString(no_spilled_vars+22+Integer.valueOf(max_call_args) +2+ Integer.valueOf(no_args) );
//////////////////////////
//max_alloc="100";
//System.out.println("spilt="+Integer.toString(spilt));








}

















}
