//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	int temp_counter=500;
	int label_print=0;
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }  

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println(" MAIN ");
      Pair_val temp_pair1=new Pair_val();
      n.f1.accept(this, (A)temp_pair1);
      n.f2.accept(this, argu);
      System.out.println(temp_pair1.label+" END ");
      Pair_val temp_pair2=new Pair_val();
      n.f3.accept(this, (A)temp_pair2);
      n.f4.accept(this, argu);
      System.out.println(temp_pair2.label);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      Pair_val temp_pair1=new Pair_val();

      //((Pair_val)argu).label+=" hhhh ";
      label_print=1;
      n.f0.accept(this, (A)temp_pair1);
      label_print=0;
      //System.out.println(n.f0.tokenImage);
      ((Pair_val)argu).label+=temp_pair1.label;
      //((Pair_val)argu).label+=" hhhh ";
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String s1=n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String s2=n.f2.accept(this, argu).toString();
      n.f3.accept(this, argu);
      Pair_val temp_pair=new Pair_val();
      temp_pair.token="fn";
      n.f4.accept(this, (A)temp_pair);
      ((Pair_val)argu).label+=" "+s1+" [ "+s2+" ] "+temp_pair.label+" ";
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      //label_print=0;
      n.f0.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      ((Pair_val)argu).label+=" NOOP ";
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      ((Pair_val)argu).label+=" ERROR ";
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Exp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Expression_1 temp_exp=new Expression_1();
      temp_exp.exp_flag=((Pair_val)argu).flag;
      Pair_val temp_pair=new Pair_val();
      temp_pair.stmt_exp=temp_exp;

      n.f1.accept(this, (A)temp_pair);
      String ss=n.f2.accept(this, argu).toString();
      if(temp_pair.stmt_exp.exp_flag==1)
      { //argu.label+=" MOVE "+" TEMP "+Integer.toString(temp_counter++)+" "+ss+" ";
         ((Pair_val)argu).label+=" "+temp_pair.label+" CJUMP "+temp_pair.stmt_exp.temp+" "+ss+" ";
      }
      else
      { String temp_var=" TEMP "+ Integer.toString(temp_counter++)+" "; 
         //argu.label+=" MOVE "  
      	((Pair_val)argu).label+=" "+temp_pair.label+" CJUMP "+temp_pair.stmt_exp.temp+" "+ss+" ";


      }
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String ss=n.f1.accept(this, argu).toString();
      ((Pair_val)argu).label+=" JUMP "+ss+" ";
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Exp()
    * f2 -> IntegerLiteral()
    * f3 -> Exp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
       Expression_1 temp_exp1=new Expression_1();
      temp_exp1.exp_flag=((Pair_val)argu).flag;
      Pair_val temp_pair1=new Pair_val();
      temp_pair1.stmt_exp=temp_exp1;
      n.f1.accept(this, (A)temp_pair1);
      String ss=n.f2.accept(this, argu).toString();
      Expression_1 temp_exp2=new Expression_1();
      temp_exp2.exp_flag=((Pair_val)argu).flag;
      Pair_val temp_pair2=new Pair_val();
      temp_pair2.stmt_exp=temp_exp2;
      n.f3.accept(this, (A)temp_pair2);
      ((Pair_val)argu).label+=temp_pair1.label+" "+temp_pair2.label+" "+" HSTORE "+temp_pair1.stmt_exp.temp+" "+ss+" "+temp_pair2.stmt_exp.temp+" ";
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Exp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String ss1=n.f1.accept(this, argu).toString();
      Expression_1 temp_exp1=new Expression_1();
      temp_exp1.exp_flag=((Pair_val)argu).flag;
      Pair_val temp_pair1=new Pair_val();
      temp_pair1.stmt_exp=temp_exp1;
      n.f2.accept(this, (A)temp_pair1);
      String ss=n.f3.accept(this, argu).toString();
      ((Pair_val)argu).label+=temp_pair1.label+" "+" HLOAD "+ss1+temp_pair1.stmt_exp.temp+" "+ss+" ";
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String ss=n.f1.accept(this, argu).toString();
      Expression_1 temp_exp1=new Expression_1();
      temp_exp1.exp_flag=((Pair_val)argu).flag;
      Pair_val temp_pair1=new Pair_val();
      temp_pair1.stmt_exp=temp_exp1;
      n.f2.accept(this, (A)temp_pair1);
      ((Pair_val)argu).label+=temp_pair1.label+" "+" MOVE "+ss+temp_pair1.stmt_exp.temp+" ";
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> Exp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Expression_1 temp_exp1=new Expression_1();
      temp_exp1.exp_flag=((Pair_val)argu).flag;
      Pair_val temp_pair1=new Pair_val();
      temp_pair1.stmt_exp=temp_exp1;
      n.f1.accept(this, (A)temp_pair1);
      ((Pair_val)argu).label+=temp_pair1.label+" "+" PRINT "+temp_pair1.stmt_exp.temp+" ";
      return _ret;
   }

   /**
    * f0 -> StmtExp()
    *       | Call()
    *       | HAllocate()
    *       | BinOp()
    *       | Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;

      R a=n.f0.accept(this, argu);
      //System.out.println(a);
      if(a!=null)
      {  ((Pair_val)argu).stmt_exp.temp=a.toString();

      }
      //((Pair_val)argu).stmt_exp.temp=
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> Exp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      if(((Pair_val)argu).token=="fn")
      {n.f0.accept(this, argu);
       Pair_val temp_pair1=new Pair_val();
     // temp_pair1.stmt_exp=temp_exp1;
      n.f1.accept(this, (A)temp_pair1);
      n.f2.accept(this, argu);
      Expression_1 temp_exp2=new Expression_1();
      temp_exp2.exp_flag=((Pair_val)argu).flag;
      Pair_val temp_pair2=new Pair_val();
      temp_pair2.stmt_exp=temp_exp2;
      n.f3.accept(this, (A)temp_pair2);
      n.f4.accept(this, argu);
      ((Pair_val)argu).label+=" BEGIN "+temp_pair1.label+" "+temp_pair2.label+" RETURN "+temp_pair2.stmt_exp.temp+" "+" END ";
      
      }
      else
      {
      	 n.f0.accept(this, argu);
       Pair_val temp_pair1=new Pair_val();
     // temp_pair1.stmt_exp=temp_exp1;
      n.f1.accept(this, (A)temp_pair1);
      n.f2.accept(this, argu);
      Expression_1 temp_exp2=new Expression_1();
      temp_exp2.exp_flag=((Pair_val)argu).flag;
      Pair_val temp_pair2=new Pair_val();
      temp_pair2.stmt_exp=temp_exp2;
      n.f3.accept(this, (A)temp_pair2);
      n.f4.accept(this, argu);
       ((Pair_val)argu).stmt_exp.temp=temp_pair2.stmt_exp.temp;
       ((Pair_val)argu).label+=temp_pair1.label+" "+temp_pair2.label;



      }
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> Exp()
    * f2 -> "("
    * f3 -> ( Exp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      //System.out.println("#########Callll");
      n.f0.accept(this, argu);
      Expression_1 temp_exp1=new Expression_1();
      temp_exp1.exp_flag=((Pair_val)argu).flag;
      Pair_val temp_pair1=new Pair_val();
      temp_pair1.stmt_exp=temp_exp1;
      n.f1.accept(this, (A)temp_pair1);
      n.f2.accept(this, argu);
      Expression_1 temp_exp2=new Expression_1();
      temp_exp2.exp_flag=((Pair_val)argu).flag;
      Pair_val temp_pair2=new Pair_val();
      temp_pair2.stmt_exp=temp_exp2;
      Vector<String> arg_list=new Vector();
      for(int i=0;i<n.f3.size();i++)
      {Expression_1 temp_exp22=new Expression_1();
      temp_exp22.exp_flag=((Pair_val)argu).flag;
      Pair_val temp_pair22=new Pair_val();
      temp_pair22.stmt_exp=temp_exp22;
      n.f3.elementAt(i).accept(this, (A)temp_pair22);
       temp_pair2.label+=temp_pair22.label;
       arg_list.add(temp_pair22.stmt_exp.temp);
      }
      
      
      n.f3.accept(this, (A)temp_pair2);
      n.f4.accept(this, argu);
      ((Pair_val)argu).stmt_exp.temp=" TEMP "+Integer.toString(temp_counter++);
      ((Pair_val)argu).label+=temp_pair1.label+" "+temp_pair2.label+" "+" MOVE "+((Pair_val)argu).stmt_exp.temp +" CALL"+temp_pair1.stmt_exp.temp +"(";
      //System.out.println("###########");System.out.println(n.f3.tokenImage);
      for(int i=0;i<arg_list.size();i++)
      { ((Pair_val)argu).label+=" "+arg_list.get(i)+" ";

      }
      ((Pair_val)argu).label+=" ) ";
      
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> Exp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Expression_1 temp_exp1=new Expression_1();
      temp_exp1.exp_flag=((Pair_val)argu).flag;
      Pair_val temp_pair1=new Pair_val();
      temp_pair1.stmt_exp=temp_exp1;
      n.f1.accept(this, (A)temp_pair1);
      ((Pair_val)argu).stmt_exp.temp=" TEMP "+Integer.toString(temp_counter++);
      ((Pair_val)argu).label+=temp_pair1.label+" MOVE "+((Pair_val)argu).stmt_exp.temp+" HALLOCATE "+temp_pair1.stmt_exp.temp+" ";
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Exp()
    * f2 -> Exp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      Pair_val temp_pair0=new Pair_val();
      n.f0.accept(this, (A)temp_pair0);
      Expression_1 temp_exp1=new Expression_1();
      temp_exp1.exp_flag=((Pair_val)argu).flag;
      Pair_val temp_pair1=new Pair_val();
      temp_pair1.stmt_exp=temp_exp1;
      n.f1.accept(this, (A)temp_pair1);
      Expression_1 temp_exp2=new Expression_1();
      temp_exp2.exp_flag=((Pair_val)argu).flag;
      Pair_val temp_pair2=new Pair_val();
      temp_pair2.stmt_exp=temp_exp2;
      n.f2.accept(this, (A)temp_pair2);
       ((Pair_val)argu).stmt_exp.temp=" TEMP "+Integer.toString(temp_counter++);
       ((Pair_val)argu).label+=temp_pair1.label+temp_pair2.label+" MOVE "+((Pair_val)argu).stmt_exp.temp+" "+temp_pair0.label+temp_pair1.stmt_exp.temp+" "+temp_pair2.stmt_exp.temp+" ";

      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      int which=n.f0.which;
      if(which==0)
      ((Pair_val)argu).label+=" LE ";
  if(which==1)
      ((Pair_val)argu).label+=" NE ";
  if(which==2)
      ((Pair_val)argu).label+=" PLUS ";
  if(which==3)
      ((Pair_val)argu).label+=" MINUS ";
  if(which==4)
      ((Pair_val)argu).label+=" TIMES ";
  if(which==5)
      ((Pair_val)argu).label+=" DIV ";
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String ss=n.f1.accept(this, argu).toString();
      return (R)(" TEMP "+ss+" ");
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)(n.f0.tokenImage);
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(label_print==1)
      { System.out.println("abc"+n.f0.tokenImage);
        ((Pair_val)argu).label+=" "+n.f0.tokenImage+" ";
          label_print=0;

      }
      return (R)(n.f0.tokenImage);
   }

}

